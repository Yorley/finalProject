
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package project;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import project.semantic.evaluators.*;
import project.semantic.SemanticStack;
import project.semantic.SymbolTable.SymbolTable;
import project.semantic.registers.*;
import project.semantic.Writer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\015\004\000\002\124\002\000\002\015\005" +
    "\000\002\005\004\000\002\005\003\000\002\021\004\000" +
    "\002\022\004\000\002\125\002\000\002\022\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\025" +
    "\003\000\002\025\003\000\002\017\004\000\002\126\002" +
    "\000\002\017\005\000\002\020\004\000\002\030\003\000" +
    "\002\003\004\000\002\127\002\000\002\003\005\000\002" +
    "\011\004\000\002\130\002\000\002\011\005\000\002\013" +
    "\004\000\002\131\002\000\002\013\005\000\002\014\004" +
    "\000\002\014\003\000\002\132\002\000\002\014\005\000" +
    "\002\012\003\000\002\012\003\000\002\031\004\000\002" +
    "\031\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\035\004" +
    "\000\002\044\004\000\002\133\002\000\002\044\005\000" +
    "\002\045\004\000\002\045\004\000\002\045\004\000\002" +
    "\134\002\000\002\045\005\000\002\046\004\000\002\135" +
    "\002\000\002\046\005\000\002\047\003\000\002\136\002" +
    "\000\002\047\005\000\002\036\004\000\002\040\004\000" +
    "\002\137\002\000\002\040\005\000\002\041\004\000\002" +
    "\140\002\000\002\041\005\000\002\042\004\000\002\141" +
    "\002\000\002\042\005\000\002\043\003\000\002\142\002" +
    "\000\002\043\005\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\053\005\000\002" +
    "\054\005\000\002\051\005\000\002\052\005\000\002\056" +
    "\003\000\002\056\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\032\004\000\002\143\002\000" +
    "\002\032\005\000\002\057\004\000\002\060\004\000\002" +
    "\061\004\000\002\062\004\000\002\144\002\000\002\062" +
    "\005\000\002\063\004\000\002\145\002\000\002\063\005" +
    "\000\002\106\003\000\002\106\004\000\002\064\004\000" +
    "\002\066\004\000\002\146\002\000\002\066\005\000\002" +
    "\067\004\000\002\147\002\000\002\067\005\000\002\070" +
    "\003\000\002\065\003\000\002\065\003\000\002\111\003" +
    "\000\002\111\003\000\002\104\004\000\002\104\004\000" +
    "\002\104\004\000\002\150\002\000\002\104\005\000\002" +
    "\107\004\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\102\005\000\002\105\003" +
    "\000\002\151\002\000\002\105\005\000\002\101\004\000" +
    "\002\075\004\000\002\112\004\000\002\112\003\000\002" +
    "\076\004\000\002\113\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\100\003" +
    "\000\002\100\003\000\002\034\004\000\002\071\004\000" +
    "\002\152\002\000\002\071\005\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\004\000\002\073" +
    "\003\000\002\153\002\000\002\073\005\000\002\033\004" +
    "\000\002\115\004\000\002\154\002\000\002\115\005\000" +
    "\002\116\004\000\002\117\004\000\002\155\002\000\002" +
    "\117\005\000\002\120\004\000\002\156\002\000\002\120" +
    "\005\000\002\121\004\000\002\123\003\000\002\123\005" +
    "\000\002\123\004\000\002\123\005\000\002\122\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\010\003\007\007\011\030\010\001\002\000" +
    "\004\002\375\001\002\000\010\003\ufffa\007\011\030\ufffa" +
    "\001\002\000\006\003\007\030\010\001\002\000\006\003" +
    "\ufffd\023\ufffd\001\002\000\006\003\034\023\035\001\002" +
    "\000\006\003\014\017\015\001\002\000\004\002\uffff\001" +
    "\002\000\010\003\ufff9\007\ufff9\030\ufff9\001\002\000\010" +
    "\003\ufff7\021\ufff7\025\ufff7\001\002\000\010\003\021\021" +
    "\017\025\022\001\002\000\010\003\ufff8\007\ufff8\030\ufff8" +
    "\001\002\000\010\003\ufff5\007\ufff5\030\ufff5\001\002\000" +
    "\010\003\ufff4\007\ufff4\030\ufff4\001\002\000\012\003\ufff3" +
    "\004\uffef\007\ufff3\030\ufff3\001\002\000\004\004\024\001" +
    "\002\000\010\003\ufff0\007\ufff0\030\ufff0\001\002\000\004" +
    "\021\025\001\002\000\010\003\uffec\007\uffec\030\uffec\001" +
    "\002\000\010\003\uffed\007\uffed\030\uffed\001\002\000\004" +
    "\004\024\001\002\000\010\003\uffee\007\uffee\030\uffee\001" +
    "\002\000\010\003\021\021\017\025\022\001\002\000\010" +
    "\003\ufff6\007\ufff6\030\ufff6\001\002\000\004\002\ufffe\001" +
    "\002\000\006\003\uffea\024\uffea\001\002\000\006\003\036" +
    "\024\040\001\002\000\006\003\uffe7\032\uffe7\001\002\000" +
    "\004\002\uffeb\001\002\000\006\003\041\032\043\001\002" +
    "\000\020\003\uffe4\012\uffe4\014\uffe4\017\uffe4\026\uffe4\027" +
    "\uffe4\033\uffe4\001\002\000\004\002\uffe8\001\002\000\020" +
    "\003\054\012\050\014\044\017\056\026\052\027\055\033" +
    "\060\001\002\000\006\003\330\023\331\001\002\000\022" +
    "\003\uffda\012\uffda\014\uffda\015\uffda\017\uffda\026\uffda\027" +
    "\uffda\033\uffda\001\002\000\022\003\uffd6\012\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\026\uffd6\027\uffd6\033\uffd6\001\002\000" +
    "\022\003\uffd8\012\uffd8\014\uffd8\015\uffd8\017\uffd8\026\uffd8" +
    "\027\uffd8\033\uffd8\001\002\000\004\023\066\001\002\000" +
    "\022\003\uffd9\012\uffd9\014\uffd9\015\uffd9\017\uffd9\026\uffd9" +
    "\027\uffd9\033\uffd9\001\002\000\006\003\277\023\300\001" +
    "\002\000\004\033\276\001\002\000\010\003\uffe0\023\uffab" +
    "\033\uffe0\001\002\000\006\003\246\023\250\001\002\000" +
    "\006\003\224\025\226\001\002\000\022\003\uffd7\012\uffd7" +
    "\014\uffd7\015\uffd7\017\uffd7\026\uffd7\027\uffd7\033\uffd7\001" +
    "\002\000\004\002\uffe1\001\002\000\004\002\uffe5\001\002" +
    "\000\022\003\064\012\050\014\044\015\uffdb\017\056\026" +
    "\052\027\055\033\uffdb\001\002\000\006\015\uffdc\033\uffdc" +
    "\001\002\000\004\023\uffab\001\002\000\004\023\066\001" +
    "\002\000\012\003\075\004\101\017\077\023\073\001\002" +
    "\000\022\003\uffaa\012\uffaa\014\uffaa\015\uffaa\017\uffaa\026" +
    "\uffaa\027\uffaa\033\uffaa\001\002\000\006\003\uff94\024\uff94" +
    "\001\002\000\004\024\171\001\002\000\006\003\uff95\024" +
    "\uff95\001\002\000\012\003\152\004\156\017\154\023\112" +
    "\001\002\000\012\042\106\043\103\044\102\045\104\001" +
    "\002\000\016\003\uff93\024\uff93\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\001\002\000\006\003\uff96\024\uff96\001\002\000" +
    "\012\042\106\043\103\044\102\045\104\001\002\000\022" +
    "\003\uffa9\012\uffa9\014\uffa9\015\uffa9\017\uffa9\026\uffa9\027" +
    "\uffa9\033\uffa9\001\002\000\012\042\106\043\103\044\102" +
    "\045\104\001\002\000\012\003\uff7c\004\uff7c\017\uff7c\023" +
    "\uff7c\001\002\000\012\003\uff7e\004\uff7e\017\uff7e\023\uff7e" +
    "\001\002\000\012\003\uff7b\004\uff7b\017\uff7b\023\uff7b\001" +
    "\002\000\012\003\111\004\113\017\114\023\112\001\002" +
    "\000\012\003\uff7d\004\uff7d\017\uff7d\023\uff7d\001\002\000" +
    "\006\003\uff92\024\uff92\001\002\000\006\003\uff8d\024\uff8d" +
    "\001\002\000\006\003\uff89\024\uff89\001\002\000\010\003" +
    "\123\004\126\017\124\001\002\000\006\003\uff8c\024\uff8c" +
    "\001\002\000\006\003\uff8b\024\uff8b\001\002\000\006\003" +
    "\uff8a\024\uff8a\001\002\000\010\003\uffb6\021\uffb6\024\uffb6" +
    "\001\002\000\012\034\135\035\136\036\134\037\137\001" +
    "\002\000\010\003\uffb8\021\uffb8\024\uffb8\001\002\000\010" +
    "\003\uffb7\021\uffb7\024\uffb7\001\002\000\006\003\127\024" +
    "\131\001\002\000\020\003\uffad\021\uffad\024\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\001\002\000\020\003\uffae\021" +
    "\uffae\024\uffae\034\uffae\035\uffae\036\uffae\037\uffae\001\002" +
    "\000\010\003\uffb9\021\uffb9\024\uffb9\001\002\000\020\003" +
    "\uffaf\021\uffaf\024\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\001\002\000\004\024\uff86\001\002\000\016\003\uff88\024" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\001\002\000\016" +
    "\003\uff87\024\uff87\042\uff87\043\uff87\044\uff87\045\uff87\001" +
    "\002\000\004\024\133\001\002\000\016\003\uff85\024\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\001\002\000\010\003" +
    "\123\004\126\017\124\001\002\000\010\003\123\004\126" +
    "\017\124\001\002\000\010\003\123\004\126\017\124\001" +
    "\002\000\010\003\123\004\126\017\124\001\002\000\020" +
    "\003\uffb0\021\uffb0\024\uffb0\034\135\035\136\036\134\037" +
    "\137\001\002\000\010\003\uffb4\021\uffb4\024\uffb4\001\002" +
    "\000\010\003\uffb1\021\uffb1\024\uffb1\001\002\000\010\003" +
    "\uffb2\021\uffb2\024\uffb2\001\002\000\010\003\uffb3\021\uffb3" +
    "\024\uffb3\001\002\000\010\003\uffb5\021\uffb5\024\uffb5\001" +
    "\002\000\006\003\uff91\024\uff91\001\002\000\012\042\106" +
    "\043\103\044\102\045\104\001\002\000\006\003\uff8e\024" +
    "\uff8e\001\002\000\006\003\uff90\024\uff90\001\002\000\024" +
    "\024\uff93\034\uffad\035\uffad\036\uffad\037\uffad\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\001\002\000\004\024\160\001\002" +
    "\000\022\034\uffae\035\uffae\036\uffae\037\uffae\042\106\043" +
    "\103\044\102\045\104\001\002\000\006\003\uff84\024\uff84" +
    "\001\002\000\022\034\uffaf\035\uffaf\036\uffaf\037\uffaf\042" +
    "\106\043\103\044\102\045\104\001\002\000\006\003\uff83" +
    "\024\uff83\001\002\000\012\003\uff81\024\uff81\040\162\041" +
    "\164\001\002\000\006\003\uff82\024\uff82\001\002\000\004" +
    "\023\uff7a\001\002\000\004\023\165\001\002\000\004\023" +
    "\uff79\001\002\000\012\003\075\004\101\017\077\023\112" +
    "\001\002\000\006\003\uff80\024\uff80\001\002\000\006\003" +
    "\uff7f\024\uff7f\001\002\000\022\003\uffa8\012\uffa8\014\uffa8" +
    "\015\uffa8\017\uffa8\026\uffa8\027\uffa8\033\uffa8\001\002\000" +
    "\006\003\173\032\174\001\002\000\022\003\uffa7\012\uffa7" +
    "\014\uffa7\015\uffa7\017\uffa7\026\uffa7\027\uffa7\033\uffa7\001" +
    "\002\000\016\003\uffa5\012\uffa5\014\uffa5\017\uffa5\026\uffa5" +
    "\027\uffa5\001\002\000\016\003\177\012\050\014\044\017" +
    "\056\026\052\027\055\001\002\000\022\003\uffa6\012\uffa6" +
    "\014\uffa6\015\uffa6\017\uffa6\026\uffa6\027\uffa6\033\uffa6\001" +
    "\002\000\004\033\202\001\002\000\006\023\uffab\033\uffa2" +
    "\001\002\000\004\033\202\001\002\000\022\003\uffa1\012" +
    "\uffa1\014\uffa1\015\uffa1\017\uffa1\026\uffa1\027\uffa1\033\uffa1" +
    "\001\002\000\024\003\uffa0\012\uffa0\013\204\014\uffa0\015" +
    "\uffa0\017\uffa0\026\uffa0\027\uffa0\033\uffa0\001\002\000\022" +
    "\003\uff9f\012\uff9f\014\uff9f\015\uff9f\017\uff9f\026\uff9f\027" +
    "\uff9f\033\uff9f\001\002\000\006\003\205\032\206\001\002" +
    "\000\016\003\uff9c\012\uff9c\014\uff9c\017\uff9c\026\uff9c\027" +
    "\uff9c\001\002\000\016\003\212\012\050\014\044\017\056" +
    "\026\052\027\055\001\002\000\022\003\uff9e\012\uff9e\014" +
    "\uff9e\015\uff9e\017\uff9e\026\uff9e\027\uff9e\033\uff9e\001\002" +
    "\000\022\003\uff9d\012\uff9d\014\uff9d\015\uff9d\017\uff9d\026" +
    "\uff9d\027\uff9d\033\uff9d\001\002\000\004\033\215\001\002" +
    "\000\006\023\uffab\033\uff99\001\002\000\004\033\215\001" +
    "\002\000\022\003\uff98\012\uff98\014\uff98\015\uff98\017\uff98" +
    "\026\uff98\027\uff98\033\uff98\001\002\000\022\003\uff97\012" +
    "\uff97\014\uff97\015\uff97\017\uff97\026\uff97\027\uff97\033\uff97" +
    "\001\002\000\022\003\uff9a\012\uff9a\014\uff9a\015\uff9a\017" +
    "\uff9a\026\uff9a\027\uff9a\033\uff9a\001\002\000\016\003\212" +
    "\012\050\014\044\017\056\026\052\027\055\001\002\000" +
    "\022\003\uff9b\012\uff9b\014\uff9b\015\uff9b\017\uff9b\026\uff9b" +
    "\027\uff9b\033\uff9b\001\002\000\022\003\uffa3\012\uffa3\014" +
    "\uffa3\015\uffa3\017\uffa3\026\uffa3\027\uffa3\033\uffa3\001\002" +
    "\000\016\003\177\012\050\014\044\017\056\026\052\027" +
    "\055\001\002\000\022\003\uffa4\012\uffa4\014\uffa4\015\uffa4" +
    "\017\uffa4\026\uffa4\027\uffa4\033\uffa4\001\002\000\010\003" +
    "\uff76\004\uff76\017\uff76\001\002\000\022\003\uff78\012\uff78" +
    "\014\uff78\015\uff78\017\uff78\026\uff78\027\uff78\033\uff78\001" +
    "\002\000\010\003\231\004\233\017\232\001\002\000\022" +
    "\003\uff77\012\uff77\014\uff77\015\uff77\017\uff77\026\uff77\027" +
    "\uff77\033\uff77\001\002\000\006\003\236\021\235\001\002" +
    "\000\016\003\236\021\235\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\001\002\000\016\003\236\021\235\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\001\002\000\016\003\236\021\235\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\001\002\000\022\003\uff72" +
    "\012\uff72\014\uff72\015\uff72\017\uff72\026\uff72\027\uff72\033" +
    "\uff72\001\002\000\022\003\uff70\012\uff70\014\uff70\015\uff70" +
    "\017\uff70\026\uff70\027\uff70\033\uff70\001\002\000\004\021" +
    "\uff6f\001\002\000\004\021\240\001\002\000\022\003\uff6e" +
    "\012\uff6e\014\uff6e\015\uff6e\017\uff6e\026\uff6e\027\uff6e\033" +
    "\uff6e\001\002\000\022\003\uff74\012\uff74\014\uff74\015\uff74" +
    "\017\uff74\026\uff74\027\uff74\033\uff74\001\002\000\022\003" +
    "\uff71\012\uff71\014\uff71\015\uff71\017\uff71\026\uff71\027\uff71" +
    "\033\uff71\001\002\000\022\003\uff73\012\uff73\014\uff73\015" +
    "\uff73\017\uff73\026\uff73\027\uff73\033\uff73\001\002\000\010" +
    "\003\231\004\233\017\232\001\002\000\022\003\uff75\012" +
    "\uff75\014\uff75\015\uff75\017\uff75\026\uff75\027\uff75\033\uff75" +
    "\001\002\000\006\003\uffc4\005\uffc4\001\002\000\022\003" +
    "\uffc6\012\uffc6\014\uffc6\015\uffc6\017\uffc6\026\uffc6\027\uffc6" +
    "\033\uffc6\001\002\000\006\003\251\005\253\001\002\000" +
    "\006\003\uffc1\024\uffc1\001\002\000\022\003\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\017\uffc5\026\uffc5\027\uffc5\033\uffc5\001" +
    "\002\000\006\003\254\024\256\001\002\000\006\003\uffbe" +
    "\021\uffbe\001\002\000\022\003\uffc2\012\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\026\uffc2\027\uffc2\033\uffc2\001\002\000\006" +
    "\003\261\021\260\001\002\000\022\003\uffbf\012\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\026\uffbf\027\uffbf\033\uffbf\001\002" +
    "\000\022\003\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc\026" +
    "\uffbc\027\uffbc\033\uffbc\001\002\000\004\021\uffbb\001\002" +
    "\000\004\021\263\001\002\000\022\003\uffba\012\uffba\014" +
    "\uffba\015\uffba\017\uffba\026\uffba\027\uffba\033\uffba\001\002" +
    "\000\006\003\261\021\260\001\002\000\022\003\uffbd\012" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\026\uffbd\027\uffbd\033\uffbd" +
    "\001\002\000\006\003\254\024\256\001\002\000\022\003" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\017\uffc0\026\uffc0\027\uffc0" +
    "\033\uffc0\001\002\000\006\003\251\005\253\001\002\000" +
    "\022\003\uffc3\012\uffc3\014\uffc3\015\uffc3\017\uffc3\026\uffc3" +
    "\027\uffc3\033\uffc3\001\002\000\006\003\273\033\274\001" +
    "\002\000\004\002\uffdd\001\002\000\004\002\uffde\001\002" +
    "\000\004\002\uffdf\001\002\000\004\002\uffe2\001\002\000" +
    "\010\003\uffd3\004\uffd3\017\uffd3\001\002\000\010\003\303" +
    "\004\306\017\304\001\002\000\022\003\uffd5\012\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\026\uffd5\027\uffd5\033\uffd5\001\002" +
    "\000\006\003\307\024\311\001\002\000\016\003\uffce\024" +
    "\uffce\034\uffad\035\uffad\036\uffad\037\uffad\001\002\000\016" +
    "\003\307\024\311\034\uffae\035\uffae\036\uffae\037\uffae\001" +
    "\002\000\022\003\uffd4\012\uffd4\014\uffd4\015\uffd4\017\uffd4" +
    "\026\uffd4\027\uffd4\033\uffd4\001\002\000\016\003\307\024" +
    "\311\034\uffaf\035\uffaf\036\uffaf\037\uffaf\001\002\000\006" +
    "\003\uffcb\021\uffcb\001\002\000\022\003\uffcf\012\uffcf\014" +
    "\uffcf\015\uffcf\017\uffcf\026\uffcf\027\uffcf\033\uffcf\001\002" +
    "\000\006\003\313\021\312\001\002\000\022\003\uffc9\012" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\026\uffc9\027\uffc9\033\uffc9" +
    "\001\002\000\004\021\uffc8\001\002\000\022\003\uffcc\012" +
    "\uffcc\014\uffcc\015\uffcc\017\uffcc\026\uffcc\027\uffcc\033\uffcc" +
    "\001\002\000\004\021\316\001\002\000\022\003\uffc7\012" +
    "\uffc7\014\uffc7\015\uffc7\017\uffc7\026\uffc7\027\uffc7\033\uffc7" +
    "\001\002\000\006\003\313\021\312\001\002\000\022\003" +
    "\uffca\012\uffca\014\uffca\015\uffca\017\uffca\026\uffca\027\uffca" +
    "\033\uffca\001\002\000\022\003\uffd0\012\uffd0\014\uffd0\015" +
    "\uffd0\017\uffd0\026\uffd0\027\uffd0\033\uffd0\001\002\000\006" +
    "\003\307\024\311\001\002\000\022\003\uffcd\012\uffcd\014" +
    "\uffcd\015\uffcd\017\uffcd\026\uffcd\027\uffcd\033\uffcd\001\002" +
    "\000\022\003\uffd1\012\uffd1\014\uffd1\015\uffd1\017\uffd1\026" +
    "\uffd1\027\uffd1\033\uffd1\001\002\000\010\003\303\004\306" +
    "\017\304\001\002\000\022\003\uffd2\012\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\026\uffd2\027\uffd2\033\uffd2\001\002\000\022" +
    "\003\uffac\012\uffac\014\uffac\015\uffac\017\uffac\026\uffac\027" +
    "\uffac\033\uffac\001\002\000\012\003\uff6b\004\uff6b\017\uff6b" +
    "\023\uff6b\001\002\000\012\003\075\004\101\017\077\023" +
    "\073\001\002\000\022\003\uff6d\012\uff6d\014\uff6d\015\uff6d" +
    "\017\uff6d\026\uff6d\027\uff6d\033\uff6d\001\002\000\022\003" +
    "\uff6c\012\uff6c\014\uff6c\015\uff6c\017\uff6c\026\uff6c\027\uff6c" +
    "\033\uff6c\001\002\000\006\003\336\024\337\001\002\000" +
    "\022\003\uff69\012\uff69\014\uff69\015\uff69\017\uff69\026\uff69" +
    "\027\uff69\033\uff69\001\002\000\006\003\uff67\032\uff67\001" +
    "\002\000\006\003\340\032\341\001\002\000\020\003\uff64" +
    "\012\uff64\014\uff64\015\uff64\017\uff64\026\uff64\027\uff64\001" +
    "\002\000\020\003\064\012\050\014\044\015\346\017\056" +
    "\026\052\027\055\001\002\000\022\003\uff68\012\uff68\014" +
    "\uff68\015\uff68\017\uff68\026\uff68\027\uff68\033\uff68\001\002" +
    "\000\004\033\354\001\002\000\022\003\uff65\012\uff65\014" +
    "\uff65\015\uff65\017\uff65\026\uff65\027\uff65\033\uff65\001\002" +
    "\000\006\015\351\033\uff61\001\002\000\004\021\347\001" +
    "\002\000\020\003\064\012\050\014\044\017\056\026\052" +
    "\027\055\033\uff5f\001\002\000\004\033\uff5e\001\002\000" +
    "\004\021\352\001\002\000\004\033\uff60\001\002\000\022" +
    "\003\uff62\012\uff62\014\uff62\015\uff62\017\uff62\026\uff62\027" +
    "\uff62\033\uff62\001\002\000\022\003\uff5d\012\uff5d\014\uff5d" +
    "\015\uff5d\017\uff5d\026\uff5d\027\uff5d\033\uff5d\001\002\000" +
    "\020\003\064\012\050\014\044\015\346\017\056\026\052" +
    "\027\055\001\002\000\022\003\uff63\012\uff63\014\uff63\015" +
    "\uff63\017\uff63\026\uff63\027\uff63\033\uff63\001\002\000\006" +
    "\003\340\032\341\001\002\000\022\003\uff66\012\uff66\014" +
    "\uff66\015\uff66\017\uff66\026\uff66\027\uff66\033\uff66\001\002" +
    "\000\012\003\075\004\101\017\077\023\073\001\002\000" +
    "\022\003\uff6a\012\uff6a\014\uff6a\015\uff6a\017\uff6a\026\uff6a" +
    "\027\uff6a\033\uff6a\001\002\000\020\003\054\012\050\014" +
    "\044\017\056\026\052\027\055\033\060\001\002\000\004" +
    "\002\uffe3\001\002\000\006\003\041\032\043\001\002\000" +
    "\004\002\uffe6\001\002\000\006\003\036\024\040\001\002" +
    "\000\004\002\uffe9\001\002\000\006\003\034\023\035\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\000\001\002" +
    "\000\006\003\ufffb\030\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\012\002\003\005\005\015\011\021\004\001" +
    "\001\000\002\001\001\000\006\005\373\021\004\001\001" +
    "\000\004\015\372\001\001\000\004\124\370\001\001\000" +
    "\004\003\032\001\001\000\004\022\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\030\001\001\000" +
    "\006\017\017\023\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\026\001\001\000" +
    "\004\020\022\001\001\000\002\001\001\000\004\030\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\027\001\001\000\002\001\001\000\006\017\017\023\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\366\001\001\000\004\011\036\001\001\000\004\130\364" +
    "\001\001\000\002\001\001\000\004\013\041\001\001\000" +
    "\004\131\362\001\001\000\002\001\001\000\022\014\060" +
    "\031\052\032\044\033\056\034\045\035\050\036\046\037" +
    "\061\001\001\000\004\115\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\326\001" +
    "\001\000\002\001\001\000\004\044\300\001\001\000\002" +
    "\001\001\000\006\132\271\143\064\001\001\000\004\040" +
    "\246\001\001\000\004\071\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\031\062\032" +
    "\044\033\056\034\045\035\050\036\046\037\061\001\001" +
    "\000\002\001\001\000\004\143\064\001\001\000\004\057" +
    "\066\001\001\000\016\060\077\065\070\101\071\102\073" +
    "\104\067\111\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\167\001\001\000\002\001\001\000\026" +
    "\050\121\051\124\052\117\053\120\054\115\055\116\075" +
    "\154\102\073\104\067\111\152\001\001\000\006\074\104" +
    "\107\150\001\001\000\004\150\146\001\001\000\002\001" +
    "\001\000\006\074\104\107\145\001\001\000\002\001\001" +
    "\000\006\074\104\107\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\102\114\110\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\121\051\124\052\117" +
    "\053\120\054\115\055\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\151\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\050\141\051\124\052\117\053\120\054" +
    "\115\055\137\056\144\001\001\000\020\050\141\051\124" +
    "\052\117\053\120\054\115\055\137\056\143\001\001\000" +
    "\020\050\141\051\124\052\117\053\120\054\115\055\137" +
    "\056\142\001\001\000\020\050\141\051\124\052\117\053" +
    "\120\054\115\055\137\056\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\074\104\107\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\150\146\001\001\000\004\112\156\001\001" +
    "\000\006\074\104\107\145\001\001\000\002\001\001\000" +
    "\006\074\104\107\106\001\001\000\002\001\001\000\006" +
    "\076\160\100\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\166\113\165\001\001\000\002\001\001" +
    "\000\012\075\154\102\073\104\067\111\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\171\001\001\000\002\001\001\000\004\144\221\001" +
    "\001\000\022\031\175\032\044\033\056\034\045\035\050" +
    "\036\046\037\061\063\174\001\001\000\002\001\001\000" +
    "\004\106\220\001\001\000\006\143\064\145\177\001\001" +
    "\000\004\106\200\001\001\000\002\001\001\000\004\064" +
    "\202\001\001\000\002\001\001\000\004\066\206\001\001" +
    "\000\004\146\216\001\001\000\022\031\210\032\044\033" +
    "\056\034\045\035\050\036\046\037\061\067\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\215\001" +
    "\001\000\006\143\064\147\212\001\001\000\004\070\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\031\210\032\044\033\056\034\045\035\050" +
    "\036\046\037\061\067\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\031\175\032\044\033\056\034\045" +
    "\035\050\036\046\037\061\063\222\001\001\000\002\001" +
    "\001\000\004\152\243\001\001\000\002\001\001\000\020" +
    "\050\227\051\124\052\117\053\120\054\115\055\116\072" +
    "\226\001\001\000\002\001\001\000\004\073\242\001\001" +
    "\000\004\073\241\001\001\000\004\073\240\001\001\000" +
    "\004\073\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\153\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\050\227\051\124\052\117\053\120\054\115\055" +
    "\116\072\244\001\001\000\002\001\001\000\004\137\267" +
    "\001\001\000\002\001\001\000\004\041\251\001\001\000" +
    "\004\140\265\001\001\000\002\001\001\000\004\042\254" +
    "\001\001\000\004\141\263\001\001\000\002\001\001\000" +
    "\004\043\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\142\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\264\001\001\000\002\001\001\000\004" +
    "\042\266\001\001\000\002\001\001\000\004\041\270\001" +
    "\001\000\002\001\001\000\004\012\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\324\001\001\000\020\045\304\050\301" +
    "\051\124\052\117\053\120\054\115\055\116\001\001\000" +
    "\002\001\001\000\004\046\323\001\001\000\004\134\321" +
    "\001\001\000\004\046\320\001\001\000\002\001\001\000" +
    "\004\046\307\001\001\000\004\135\316\001\001\000\002" +
    "\001\001\000\004\047\313\001\001\000\002\001\001\000" +
    "\004\136\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\045\325\050\301\051" +
    "\124\052\117\053\120\054\115\055\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\154\360\001\001\000" +
    "\016\065\333\101\071\102\073\104\067\111\075\116\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\334\001\001\000\002\001\001\000\004\155\356\001\001" +
    "\000\004\120\341\001\001\000\004\156\354\001\001\000" +
    "\024\031\344\032\044\033\056\034\045\035\050\036\046" +
    "\037\061\121\343\123\342\001\001\000\002\001\001\000" +
    "\004\122\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\347\032\044\033\056\034" +
    "\045\035\050\036\046\037\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\031\344\032\044\033\056\034\045" +
    "\035\050\036\046\037\061\121\355\123\342\001\001\000" +
    "\002\001\001\000\004\120\357\001\001\000\002\001\001" +
    "\000\016\065\333\101\071\102\073\104\067\111\075\116" +
    "\361\001\001\000\002\001\001\000\022\014\363\031\052" +
    "\032\044\033\056\034\045\035\050\036\046\037\061\001" +
    "\001\000\002\001\001\000\004\013\365\001\001\000\002" +
    "\001\001\000\004\011\367\001\001\000\002\001\001\000" +
    "\004\003\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public  ArrayList<String> expectedTokens_msg = new ArrayList<String>();
    public  ArrayList<String> errorsLines = new ArrayList<String>();
    public  ArrayList<String> errors = new ArrayList<String>();
    public  ArrayList<String> getExpectedTokens() {
        return expectedTokens_msg;
    }

    public ArrayList<String> getLineErrors() {
        return errorsLines;
    }
    public ArrayList<String> getErrors() {
        return errors;
    }

    protected void report_expected_token_ids() {

        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected : ids) {
            if (!(symbl_name_from_id(expected).equals("EOF") || symbl_name_from_id(expected).equals("error")))
                list.add(symbl_name_from_id(expected));
          }
        String msg = "expected tokens are "+ list;
        expectedTokens_msg.add(msg);
        System.err.println(msg);  
    }
    
    public void syntax_error(Symbol s){
        String msg = "Syntax error: "+" Line: " + s.left +" Column: " +s.right;
        String symbolName = symbl_name_from_id(s.sym);
        msg += "\nCurrent: " + symbolName + "\n";

        errorsLines.add(msg);
        System.err.print(msg);
      
        report_expected_token_ids();
    }
    
    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{   
        
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    public void printError(String pMsg){
        System.err.println(pMsg+"\n");
        errors.add(pMsg+"\n");        
    }

    public void report_fatal_error(String message, Object info) {

        //report_error(message, info);
        //System.exit(1);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= variables_list lmain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= lmain 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lmain ::= MAIN main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
 printError("Missing main token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lmain ::= error NT$0 main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables_list ::= variables_elem variables_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables_list ::= variables_elem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variables_elem ::= TYPE_NUM variables_elem_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables_elem_one ::= IDENTIFIER variables_elem_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
 printError("Missing Type token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_elem_one ::= error NT$1 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables_elem_two ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables_elem_two ::= assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables_elem_two ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // end_decl ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // end_decl ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assign ::= ASSIGN assign_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
 printError("Missing = token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assign ::= error NT$2 assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_one ::= LITERAL_NUM assign_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_one",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign_two ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_two",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // main ::= LPAR mainn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // main ::= error NT$3 mainn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mainn ::= RPAR mainnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mainn ::= error NT$4 mainnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mainnn ::= BEGIN mainnnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainnn ::= error NT$5 mainnnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainnnn ::= content END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mainnnn ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainnnn ::= error NT$6 fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fin ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fin ::= error 
            {
              Object RESULT =null;
		 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // content ::= structures content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // content ::= structures 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structures ::= if_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // structures ::= putw_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // structures ::= puts_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structures ::= while_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structures ::= declar_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // putw_struct ::= PUTW putw_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // putw_struct_one ::= LPAR putw_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$7 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // putw_struct_one ::= error NT$7 putw_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // putw_struct_two ::= arithmetic putw_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // putw_struct_two ::= IDENTIFIER putw_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // putw_struct_two ::= LITERAL_NUM putw_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$8 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // putw_struct_two ::= error NT$8 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // putw_struct_three ::= RPAR putw_struct_fourth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$9 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // putw_struct_three ::= error NT$9 putw_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // putw_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$10 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // putw_struct_fourth ::= error NT$10 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // puts_struct ::= PUTS puts_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // puts_struct_one ::= LPAR puts_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // puts_struct_one ::= error NT$11 puts_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // puts_struct_two ::= LITERAL_CONSTANT puts_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$12 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // puts_struct_two ::= error NT$12 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // puts_struct_three ::= RPAR puts_struct_fourth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$13 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // puts_struct_three ::= error NT$13 puts_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // puts_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$14 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // puts_struct_fourth ::= error NT$14 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arithmetic ::= add 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arithmetic ::= subs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arithmetic ::= mult 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithmetic ::= div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // mult ::= params MULT _aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mult",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // div ::= params DIV _aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("div",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // add ::= params PLUS _aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("add",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // subs ::= params MINUS _aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subs",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _aux ::= arithmetic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _aux ::= params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // params ::= LITERAL_NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // params ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // params ::= error 
            {
              Object RESULT =null;
		 printError("Missing parameter token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_struct ::= IF if_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$15 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_struct ::= error NT$15 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_struct_one ::= LPAR if_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_one",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_struct_two ::= condition if_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_two",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_struct_three ::= RPAR if_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_three",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_struct_four ::= BEGIN if_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$16 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // if_struct_four ::= error NT$16 if_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_struct_five ::= content if_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_struct_five ::= error NT$17 if_struct_six 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_struct_six ::= END else_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // else_struct ::= ELSE else_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_struct_one ::= BEGIN else_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$18 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_struct_one ::= error NT$18 else_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else_struct_two ::= content else_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$19 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // else_struct_two ::= error NT$19 else_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_struct_three ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_three",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condition ::= condition_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condition ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condition_aux ::= condition_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condition_aux ::= error 
            {
              Object RESULT =null;
		 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condition_one ::= LITERAL_NUM condition_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condition_one ::= IDENTIFIER condition_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condition_one ::= arithmetic_aux condition_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$20 ::= 
            {
              Object RESULT =null;
 printError("Missing literal_num or Idendifier or arithmetic expression token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condition_one ::= error NT$20 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condition_two ::= comparison condition_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_two",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condition_three ::= LITERAL_NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condition_three ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condition_three ::= arithmetic_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condition_three ::= error 
            {
              Object RESULT =null;
		 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithmetic_aux ::= LPAR arithmetic arithmetic_aux_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithmetic_aux_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$21 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$21",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithmetic_aux_one ::= error NT$21 RPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exp ::= LPAR expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= condition_aux expr_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr_one ::= RPAR expr_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_two ::= logic_comparison expr_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_two",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr_three ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_three",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comparison ::= LOWER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // comparison ::= HIGHER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // comparison ::= EQUALS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // comparison ::= DIFFERENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logic_comparison ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logic_comparison ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declar_assign ::= IDENTIFIER declar_assign_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // declar_assign_one ::= ASSIGN declar_assign_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$22 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$22",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declar_assign_one ::= error NT$22 declar_assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declar_assign_two ::= IDENTIFIER declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declar_assign_two ::= arithmetic declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declar_assign_two ::= LITERAL_NUM declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // declar_assign_two ::= error declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // declar_assign_three ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$23 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$23",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // declar_assign_three ::= error NT$23 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // while_struct ::= WHILE while_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // while_struct_one ::= LPAR while_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$24 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$24",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // while_struct_one ::= error NT$24 while_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // while_struct_two ::= condition while_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_two",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // while_struct_three ::= RPAR while_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$25 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$25",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // while_struct_three ::= error NT$25 while_struct_four 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // while_struct_four ::= BEGIN while_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$26 ::= 
            {
              Object RESULT =null;
 printError("Missing { token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$26",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // while_struct_four ::= error NT$26 while_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // while_struct_five ::= while_struct_aux while_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_five",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // while_struct_aux ::= content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // while_struct_aux ::= content BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // while_struct_aux ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // while_struct_aux ::= BREAK SEMICOLON content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // while_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_six",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
