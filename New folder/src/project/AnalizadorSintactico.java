
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package project;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import project.semantic.evaluators.*;
import project.semantic.SemanticStack;
import project.semantic.SymbolTable.SymbolTable;
import project.semantic.registers.*;
import project.semantic.Writer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\015\004\000\002\161\002\000\002\015\005" +
    "\000\002\005\004\000\002\005\003\000\002\162\002\000" +
    "\002\021\005\000\002\163\002\000\002\022\005\000\002" +
    "\164\002\000\002\022\005\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\025\003\000\002\025\003" +
    "\000\002\017\004\000\002\165\002\000\002\017\005\000" +
    "\002\166\002\000\002\020\005\000\002\030\003\000\002" +
    "\003\004\000\002\167\002\000\002\003\005\000\002\011" +
    "\004\000\002\170\002\000\002\011\005\000\002\013\004" +
    "\000\002\171\002\000\002\013\005\000\002\014\004\000" +
    "\002\014\003\000\002\172\002\000\002\014\005\000\002" +
    "\012\003\000\002\012\003\000\002\031\004\000\002\031" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\173\002\000\002\035\005\000\002" +
    "\044\004\000\002\174\002\000\002\044\005\000\002\045" +
    "\004\000\002\175\002\000\002\045\005\000\002\176\002" +
    "\000\002\045\005\000\002\177\002\000\002\045\005\000" +
    "\002\046\004\000\002\200\002\000\002\046\005\000\002" +
    "\047\003\000\002\201\002\000\002\047\005\000\002\202" +
    "\002\000\002\036\005\000\002\040\004\000\002\203\002" +
    "\000\002\040\005\000\002\204\002\000\002\041\005\000" +
    "\002\205\002\000\002\041\005\000\002\042\004\000\002" +
    "\206\002\000\002\042\005\000\002\043\003\000\002\207" +
    "\002\000\002\043\005\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\210\002\000" +
    "\002\053\006\000\002\211\002\000\002\054\006\000\002" +
    "\212\002\000\002\051\006\000\002\213\002\000\002\052" +
    "\006\000\002\056\003\000\002\056\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\214\002\000" +
    "\002\032\005\000\002\215\002\000\002\032\005\000\002" +
    "\057\004\000\002\060\004\000\002\061\004\000\002\062" +
    "\004\000\002\216\002\000\002\062\005\000\002\063\004" +
    "\000\002\217\002\000\002\063\005\000\002\106\003\000" +
    "\002\106\004\000\002\064\004\000\002\066\004\000\002" +
    "\220\002\000\002\066\005\000\002\067\004\000\002\221" +
    "\002\000\002\067\005\000\002\070\003\000\002\065\003" +
    "\000\002\065\003\000\002\111\003\000\002\111\003\000" +
    "\002\222\002\000\002\104\005\000\002\223\002\000\002" +
    "\104\005\000\002\104\004\000\002\224\002\000\002\104" +
    "\005\000\002\107\004\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\102\005\000" +
    "\002\105\003\000\002\225\002\000\002\105\005\000\002" +
    "\101\004\000\002\075\004\000\002\112\004\000\002\112" +
    "\003\000\002\076\004\000\002\113\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\100\003\000\002\100\003\000\002\226\002\000\002" +
    "\034\005\000\002\071\004\000\002\227\002\000\002\071" +
    "\005\000\002\230\002\000\002\072\005\000\002\072\004" +
    "\000\002\231\002\000\002\072\005\000\002\072\004\000" +
    "\002\073\003\000\002\232\002\000\002\073\005\000\002" +
    "\033\004\000\002\115\004\000\002\233\002\000\002\115" +
    "\005\000\002\116\004\000\002\117\004\000\002\234\002" +
    "\000\002\117\005\000\002\120\004\000\002\235\002\000" +
    "\002\120\005\000\002\121\004\000\002\123\003\000\002" +
    "\123\005\000\002\123\004\000\002\123\005\000\002\122" +
    "\003\000\002\125\004\000\002\126\004\000\002\236\002" +
    "\000\002\126\005\000\002\127\004\000\002\127\005\000" +
    "\002\237\002\000\002\127\006\000\002\130\004\000\002" +
    "\240\002\000\002\130\005\000\002\131\004\000\002\131" +
    "\003\000\002\132\004\000\002\136\004\000\002\241\002" +
    "\000\002\136\005\000\002\136\004\000\002\124\004\000" +
    "\002\124\004\000\002\242\002\000\002\124\005\000\002" +
    "\135\003\000\002\133\004\000\002\243\002\000\002\133" +
    "\007\000\002\134\003\000\002\140\004\000\002\141\004" +
    "\000\002\244\002\000\002\141\005\000\002\245\002\000" +
    "\002\142\005\000\002\142\003\000\002\143\004\000\002" +
    "\246\002\000\002\143\005\000\002\144\004\000\002\247" +
    "\002\000\002\144\005\000\002\145\004\000\002\250\002" +
    "\000\002\145\005\000\002\152\004\000\002\147\004\000" +
    "\002\251\002\000\002\147\005\000\002\150\004\000\002" +
    "\150\003\000\002\146\003\000\002\146\003\000\002\137" +
    "\004\000\002\137\003\000\002\153\004\000\002\252\002" +
    "\000\002\153\005\000\002\154\004\000\002\253\002\000" +
    "\002\154\005\000\002\155\004\000\002\254\002\000\002" +
    "\155\005\000\002\156\004\000\002\255\002\000\002\156" +
    "\005\000\002\160\003\000\002\160\003\000\002\157\004" +
    "\000\002\157\003\000\002\151\003\000\002\151\003\000" +
    "\002\151\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\010\003\007\007\011\030\010\001\002\000" +
    "\004\002\u0181\001\002\000\010\003\ufffa\007\011\030\ufffa" +
    "\001\002\000\006\003\007\030\010\001\002\000\006\003" +
    "\ufffd\023\ufffd\001\002\000\006\003\037\023\040\001\002" +
    "\000\006\003\ufff9\017\ufff9\001\002\000\004\002\uffff\001" +
    "\002\000\006\003\015\017\016\001\002\000\010\003\ufff8" +
    "\007\ufff8\030\ufff8\001\002\000\010\003\ufff5\021\ufff5\025" +
    "\ufff5\001\002\000\010\003\ufff7\021\ufff7\025\ufff7\001\002" +
    "\000\010\003\023\021\021\025\024\001\002\000\010\003" +
    "\ufff6\007\ufff6\030\ufff6\001\002\000\010\003\ufff3\007\ufff3" +
    "\030\ufff3\001\002\000\010\003\ufff2\007\ufff2\030\ufff2\001" +
    "\002\000\012\003\ufff1\004\uffed\007\ufff1\030\ufff1\001\002" +
    "\000\004\004\026\001\002\000\010\003\uffee\007\uffee\030" +
    "\uffee\001\002\000\004\021\uffeb\001\002\000\004\021\030" +
    "\001\002\000\010\003\uffe9\007\uffe9\030\uffe9\001\002\000" +
    "\010\003\uffea\007\uffea\030\uffea\001\002\000\004\004\026" +
    "\001\002\000\010\003\uffec\007\uffec\030\uffec\001\002\000" +
    "\010\003\023\021\021\025\024\001\002\000\010\003\ufff4" +
    "\007\ufff4\030\ufff4\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\uffe7\024\uffe7\001\002\000\006\003\041\024\043" +
    "\001\002\000\006\003\uffe4\032\uffe4\001\002\000\004\002" +
    "\uffe8\001\002\000\006\003\044\032\046\001\002\000\024" +
    "\003\uffe1\007\uffe1\012\uffe1\014\uffe1\017\uffe1\026\uffe1\027" +
    "\uffe1\033\uffe1\050\uffe1\001\002\000\004\002\uffe5\001\002" +
    "\000\024\003\066\007\062\012\056\014\051\017\054\026" +
    "\064\027\070\033\053\050\055\001\002\000\030\003\uffd5" +
    "\007\uffd5\012\uffd5\014\uffd5\015\uffd5\017\uffd5\026\uffd5\027" +
    "\uffd5\033\uffd5\046\uffd5\050\uffd5\001\002\000\030\003\uffd3" +
    "\007\uffd3\012\uffd3\014\uffd3\015\uffd3\017\uffd3\026\uffd3\027" +
    "\uffd3\033\uffd3\046\uffd3\050\uffd3\001\002\000\006\003\u015c" +
    "\023\u015e\001\002\000\006\003\u0136\023\u0137\001\002\000" +
    "\004\002\uffde\001\002\000\006\003\uff67\025\uff67\001\002" +
    "\000\006\003\337\023\340\001\002\000\004\023\uff9e\001" +
    "\002\000\030\003\uffd7\007\uffd7\012\uffd7\014\uffd7\015\uffd7" +
    "\017\uffd7\026\uffd7\027\uffd7\033\uffd7\046\uffd7\050\uffd7\001" +
    "\002\000\004\002\uffe2\001\002\000\030\003\uffd2\007\uffd2" +
    "\012\uffd2\014\uffd2\015\uffd2\017\uffd2\026\uffd2\027\uffd2\033" +
    "\uffd2\046\uffd2\050\uffd2\001\002\000\006\003\334\017\100" +
    "\001\002\000\030\003\uffd6\007\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\017\uffd6\026\uffd6\027\uffd6\033\uffd6\046\uffd6\050\uffd6" +
    "\001\002\000\006\003\uffd0\023\uffd0\001\002\000\030\003" +
    "\uffd4\007\uffd4\012\uffd4\014\uffd4\015\uffd4\017\uffd4\026\uffd4" +
    "\027\uffd4\033\uffd4\046\uffd4\050\uffd4\001\002\000\012\003" +
    "\uffdd\017\uff34\023\uff9c\033\uffdd\001\002\000\004\033\273" +
    "\001\002\000\006\003\uffbe\023\uffbe\001\002\000\030\003" +
    "\073\007\062\012\056\014\051\015\uffd8\017\054\026\064" +
    "\027\070\033\uffd8\046\uffd8\050\055\001\002\000\030\003" +
    "\uffd1\007\uffd1\012\uffd1\014\uffd1\015\uffd1\017\uffd1\026\uffd1" +
    "\027\uffd1\033\uffd1\046\uffd1\050\uffd1\001\002\000\006\017" +
    "\uff34\023\uff9c\001\002\000\010\015\uffd9\033\uffd9\046\uffd9" +
    "\001\002\000\004\023\101\001\002\000\004\017\100\001" +
    "\002\000\006\003\uff33\023\uff33\001\002\000\006\003\uff32" +
    "\023\uff32\001\002\000\012\003\110\004\114\017\111\023" +
    "\106\001\002\000\030\003\uff9b\007\uff9b\012\uff9b\014\uff9b" +
    "\015\uff9b\017\uff9b\026\uff9b\027\uff9b\033\uff9b\046\uff9b\050" +
    "\uff9b\001\002\000\006\003\uff85\024\uff85\001\002\000\004" +
    "\024\212\001\002\000\006\003\uff86\024\uff86\001\002\000" +
    "\012\003\173\004\177\017\175\023\126\001\002\000\012" +
    "\042\122\043\117\044\116\045\120\001\002\000\016\003" +
    "\uff84\024\uff84\042\uff7e\043\uff7e\044\uff7e\045\uff7e\001\002" +
    "\000\012\042\uff81\043\uff81\044\uff81\045\uff81\001\002\000" +
    "\006\003\uff87\024\uff87\001\002\000\030\003\uff9a\007\uff9a" +
    "\012\uff9a\014\uff9a\015\uff9a\017\uff9a\026\uff9a\027\uff9a\033" +
    "\uff9a\046\uff9a\050\uff9a\001\002\000\012\042\uff83\043\uff83" +
    "\044\uff83\045\uff83\001\002\000\012\042\122\043\117\044" +
    "\116\045\120\001\002\000\012\003\uff6b\004\uff6b\017\uff6b" +
    "\023\uff6b\001\002\000\012\003\uff6d\004\uff6d\017\uff6d\023" +
    "\uff6d\001\002\000\012\003\uff6a\004\uff6a\017\uff6a\023\uff6a" +
    "\001\002\000\012\003\125\004\130\017\127\023\126\001" +
    "\002\000\012\003\uff6c\004\uff6c\017\uff6c\023\uff6c\001\002" +
    "\000\006\003\uff82\024\uff82\001\002\000\006\003\uff7c\024" +
    "\uff7c\001\002\000\006\003\uff78\024\uff78\001\002\000\010" +
    "\003\137\004\142\017\140\001\002\000\006\003\uff7a\024" +
    "\uff7a\001\002\000\006\003\uff7b\024\uff7b\001\002\000\006" +
    "\003\uff79\024\uff79\001\002\000\010\003\uffac\021\uffac\024" +
    "\uffac\001\002\000\012\034\151\035\152\036\150\037\153" +
    "\001\002\000\010\003\uffae\021\uffae\024\uffae\001\002\000" +
    "\010\003\uffad\021\uffad\024\uffad\001\002\000\006\003\143" +
    "\024\145\001\002\000\020\003\uff9f\021\uff9f\024\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\001\002\000\020\003\uffa0" +
    "\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\001" +
    "\002\000\010\003\uffaf\021\uffaf\024\uffaf\001\002\000\020" +
    "\003\uffa1\021\uffa1\024\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\001\002\000\004\024\uff75\001\002\000\016\003\uff77" +
    "\024\uff77\042\uff77\043\uff77\044\uff77\045\uff77\001\002\000" +
    "\016\003\uff76\024\uff76\042\uff76\043\uff76\044\uff76\045\uff76" +
    "\001\002\000\004\024\147\001\002\000\016\003\uff74\024" +
    "\uff74\042\uff74\043\uff74\044\uff74\045\uff74\001\002\000\010" +
    "\003\uffab\004\uffab\017\uffab\001\002\000\010\003\uffa7\004" +
    "\uffa7\017\uffa7\001\002\000\010\003\uffa5\004\uffa5\017\uffa5" +
    "\001\002\000\010\003\uffa9\004\uffa9\017\uffa9\001\002\000" +
    "\010\003\137\004\142\017\140\001\002\000\020\003\uffa2" +
    "\021\uffa2\024\uffa2\034\151\035\152\036\150\037\153\001" +
    "\002\000\010\003\uffa8\021\uffa8\024\uffa8\001\002\000\010" +
    "\003\uffa3\021\uffa3\024\uffa3\001\002\000\010\003\137\004" +
    "\142\017\140\001\002\000\010\003\uffa4\021\uffa4\024\uffa4" +
    "\001\002\000\010\003\137\004\142\017\140\001\002\000" +
    "\010\003\uffa6\021\uffa6\024\uffa6\001\002\000\010\003\137" +
    "\004\142\017\140\001\002\000\010\003\uffaa\021\uffaa\024" +
    "\uffaa\001\002\000\012\042\122\043\117\044\116\045\120" +
    "\001\002\000\006\003\uff80\024\uff80\001\002\000\012\042" +
    "\122\043\117\044\116\045\120\001\002\000\006\003\uff7d" +
    "\024\uff7d\001\002\000\006\003\uff7f\024\uff7f\001\002\000" +
    "\024\024\uff84\034\uff9f\035\uff9f\036\uff9f\037\uff9f\042\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\001\002\000\004\024\201\001" +
    "\002\000\022\034\uffa0\035\uffa0\036\uffa0\037\uffa0\042\uff81" +
    "\043\uff81\044\uff81\045\uff81\001\002\000\006\003\uff73\024" +
    "\uff73\001\002\000\022\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\001\002\000\006\003" +
    "\uff72\024\uff72\001\002\000\012\003\uff70\024\uff70\040\203" +
    "\041\205\001\002\000\006\003\uff71\024\uff71\001\002\000" +
    "\004\023\uff69\001\002\000\004\023\206\001\002\000\004" +
    "\023\uff68\001\002\000\012\003\110\004\114\017\111\023" +
    "\126\001\002\000\006\003\uff6f\024\uff6f\001\002\000\006" +
    "\003\uff6e\024\uff6e\001\002\000\030\003\uff99\007\uff99\012" +
    "\uff99\014\uff99\015\uff99\017\uff99\026\uff99\027\uff99\033\uff99" +
    "\046\uff99\050\uff99\001\002\000\006\003\214\032\215\001" +
    "\002\000\030\003\uff98\007\uff98\012\uff98\014\uff98\015\uff98" +
    "\017\uff98\026\uff98\027\uff98\033\uff98\046\uff98\050\uff98\001" +
    "\002\000\022\003\uff96\007\uff96\012\uff96\014\uff96\017\uff96" +
    "\026\uff96\027\uff96\050\uff96\001\002\000\022\003\217\007" +
    "\062\012\056\014\051\017\054\026\064\027\070\050\055" +
    "\001\002\000\030\003\uff97\007\uff97\012\uff97\014\uff97\015" +
    "\uff97\017\uff97\026\uff97\027\uff97\033\uff97\046\uff97\050\uff97" +
    "\001\002\000\010\017\uff34\023\uff9c\033\uff93\001\002\000" +
    "\004\033\222\001\002\000\030\003\uff94\007\uff94\012\uff94" +
    "\014\uff94\015\uff94\017\uff94\026\uff94\027\uff94\033\uff94\046" +
    "\uff94\050\uff94\001\002\000\032\003\uff91\007\uff91\012\uff91" +
    "\013\224\014\uff91\015\uff91\017\uff91\026\uff91\027\uff91\033" +
    "\uff91\046\uff91\050\uff91\001\002\000\030\003\uff90\007\uff90" +
    "\012\uff90\014\uff90\015\uff90\017\uff90\026\uff90\027\uff90\033" +
    "\uff90\046\uff90\050\uff90\001\002\000\006\003\225\032\226" +
    "\001\002\000\022\003\uff8d\007\uff8d\012\uff8d\014\uff8d\017" +
    "\uff8d\026\uff8d\027\uff8d\050\uff8d\001\002\000\022\003\231" +
    "\007\062\012\056\014\051\017\054\026\064\027\070\050" +
    "\055\001\002\000\030\003\uff8f\007\uff8f\012\uff8f\014\uff8f" +
    "\015\uff8f\017\uff8f\026\uff8f\027\uff8f\033\uff8f\046\uff8f\050" +
    "\uff8f\001\002\000\030\003\uff8e\007\uff8e\012\uff8e\014\uff8e" +
    "\015\uff8e\017\uff8e\026\uff8e\027\uff8e\033\uff8e\046\uff8e\050" +
    "\uff8e\001\002\000\010\017\uff34\023\uff9c\033\uff8a\001\002" +
    "\000\004\033\234\001\002\000\030\003\uff8b\007\uff8b\012" +
    "\uff8b\014\uff8b\015\uff8b\017\uff8b\026\uff8b\027\uff8b\033\uff8b" +
    "\046\uff8b\050\uff8b\001\002\000\030\003\uff88\007\uff88\012" +
    "\uff88\014\uff88\015\uff88\017\uff88\026\uff88\027\uff88\033\uff88" +
    "\046\uff88\050\uff88\001\002\000\004\033\234\001\002\000" +
    "\030\003\uff89\007\uff89\012\uff89\014\uff89\015\uff89\017\uff89" +
    "\026\uff89\027\uff89\033\uff89\046\uff89\050\uff89\001\002\000" +
    "\022\003\231\007\062\012\056\014\051\017\054\026\064" +
    "\027\070\050\055\001\002\000\030\003\uff8c\007\uff8c\012" +
    "\uff8c\014\uff8c\015\uff8c\017\uff8c\026\uff8c\027\uff8c\033\uff8c" +
    "\046\uff8c\050\uff8c\001\002\000\004\033\222\001\002\000" +
    "\030\003\uff92\007\uff92\012\uff92\014\uff92\015\uff92\017\uff92" +
    "\026\uff92\027\uff92\033\uff92\046\uff92\050\uff92\001\002\000" +
    "\022\003\217\007\062\012\056\014\051\017\054\026\064" +
    "\027\070\050\055\001\002\000\030\003\uff95\007\uff95\012" +
    "\uff95\014\uff95\015\uff95\017\uff95\026\uff95\027\uff95\033\uff95" +
    "\046\uff95\050\uff95\001\002\000\006\003\246\023\247\001" +
    "\002\000\006\003\uffbb\005\uffbb\001\002\000\006\003\251" +
    "\005\253\001\002\000\030\003\uffbd\007\uffbd\012\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\026\uffbd\027\uffbd\033\uffbd\046\uffbd" +
    "\050\uffbd\001\002\000\006\003\uffb7\024\uffb7\001\002\000" +
    "\030\003\uffbc\007\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc" +
    "\026\uffbc\027\uffbc\033\uffbc\046\uffbc\050\uffbc\001\002\000" +
    "\006\003\uffb9\024\uffb9\001\002\000\006\003\255\024\257" +
    "\001\002\000\006\003\uffb4\021\uffb4\001\002\000\030\003" +
    "\uffb8\007\uffb8\012\uffb8\014\uffb8\015\uffb8\017\uffb8\026\uffb8" +
    "\027\uffb8\033\uffb8\046\uffb8\050\uffb8\001\002\000\006\003" +
    "\262\021\261\001\002\000\030\003\uffb5\007\uffb5\012\uffb5" +
    "\014\uffb5\015\uffb5\017\uffb5\026\uffb5\027\uffb5\033\uffb5\046" +
    "\uffb5\050\uffb5\001\002\000\030\003\uffb2\007\uffb2\012\uffb2" +
    "\014\uffb2\015\uffb2\017\uffb2\026\uffb2\027\uffb2\033\uffb2\046" +
    "\uffb2\050\uffb2\001\002\000\004\021\uffb1\001\002\000\004" +
    "\021\264\001\002\000\030\003\uffb0\007\uffb0\012\uffb0\014" +
    "\uffb0\015\uffb0\017\uffb0\026\uffb0\027\uffb0\033\uffb0\046\uffb0" +
    "\050\uffb0\001\002\000\006\003\262\021\261\001\002\000" +
    "\030\003\uffb3\007\uffb3\012\uffb3\014\uffb3\015\uffb3\017\uffb3" +
    "\026\uffb3\027\uffb3\033\uffb3\046\uffb3\050\uffb3\001\002\000" +
    "\006\003\255\024\257\001\002\000\030\003\uffb6\007\uffb6" +
    "\012\uffb6\014\uffb6\015\uffb6\017\uffb6\026\uffb6\027\uffb6\033" +
    "\uffb6\046\uffb6\050\uffb6\001\002\000\006\003\251\005\253" +
    "\001\002\000\030\003\uffba\007\uffba\012\uffba\014\uffba\015" +
    "\uffba\017\uffba\026\uffba\027\uffba\033\uffba\046\uffba\050\uffba" +
    "\001\002\000\004\002\uffdf\001\002\000\006\003\275\033" +
    "\276\001\002\000\004\002\uffda\001\002\000\004\002\uffdb" +
    "\001\002\000\004\002\uffdc\001\002\000\006\003\301\023" +
    "\302\001\002\000\010\003\uffcd\004\uffcd\017\uffcd\001\002" +
    "\000\010\003\305\004\307\017\306\001\002\000\030\003" +
    "\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf\017\uffcf\026\uffcf" +
    "\027\uffcf\033\uffcf\046\uffcf\050\uffcf\001\002\000\006\003" +
    "\312\024\314\001\002\000\016\003\uffc6\024\uffc6\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\001\002\000\016\003\uffca\024" +
    "\uffca\034\uffa0\035\uffa0\036\uffa0\037\uffa0\001\002\000\016" +
    "\003\uffc8\024\uffc8\034\uffa1\035\uffa1\036\uffa1\037\uffa1\001" +
    "\002\000\030\003\uffce\007\uffce\012\uffce\014\uffce\015\uffce" +
    "\017\uffce\026\uffce\027\uffce\033\uffce\046\uffce\050\uffce\001" +
    "\002\000\006\003\312\024\314\001\002\000\006\003\uffc3" +
    "\021\uffc3\001\002\000\030\003\uffc7\007\uffc7\012\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\026\uffc7\027\uffc7\033\uffc7\046\uffc7" +
    "\050\uffc7\001\002\000\006\003\316\021\315\001\002\000" +
    "\030\003\uffc1\007\uffc1\012\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\026\uffc1\027\uffc1\033\uffc1\046\uffc1\050\uffc1\001\002\000" +
    "\004\021\uffc0\001\002\000\030\003\uffc4\007\uffc4\012\uffc4" +
    "\014\uffc4\015\uffc4\017\uffc4\026\uffc4\027\uffc4\033\uffc4\046" +
    "\uffc4\050\uffc4\001\002\000\004\021\321\001\002\000\030" +
    "\003\uffbf\007\uffbf\012\uffbf\014\uffbf\015\uffbf\017\uffbf\026" +
    "\uffbf\027\uffbf\033\uffbf\046\uffbf\050\uffbf\001\002\000\006" +
    "\003\316\021\315\001\002\000\030\003\uffc2\007\uffc2\012" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\026\uffc2\027\uffc2\033\uffc2" +
    "\046\uffc2\050\uffc2\001\002\000\006\003\312\024\314\001" +
    "\002\000\030\003\uffc9\007\uffc9\012\uffc9\014\uffc9\015\uffc9" +
    "\017\uffc9\026\uffc9\027\uffc9\033\uffc9\046\uffc9\050\uffc9\001" +
    "\002\000\006\003\312\024\314\001\002\000\030\003\uffc5" +
    "\007\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5\026\uffc5\027" +
    "\uffc5\033\uffc5\046\uffc5\050\uffc5\001\002\000\030\003\uffcb" +
    "\007\uffcb\012\uffcb\014\uffcb\015\uffcb\017\uffcb\026\uffcb\027" +
    "\uffcb\033\uffcb\046\uffcb\050\uffcb\001\002\000\010\003\305" +
    "\004\307\017\306\001\002\000\030\003\uffcc\007\uffcc\012" +
    "\uffcc\014\uffcc\015\uffcc\017\uffcc\026\uffcc\027\uffcc\033\uffcc" +
    "\046\uffcc\050\uffcc\001\002\000\006\003\uff35\023\uff35\001" +
    "\002\000\006\003\uff36\023\uff36\001\002\000\004\023\101" +
    "\001\002\000\030\003\uff9d\007\uff9d\012\uff9d\014\uff9d\015" +
    "\uff9d\017\uff9d\026\uff9d\027\uff9d\033\uff9d\046\uff9d\050\uff9d" +
    "\001\002\000\006\003\uff2b\017\uff2b\001\002\000\006\003" +
    "\342\017\344\001\002\000\030\003\uff2d\007\uff2d\012\uff2d" +
    "\014\uff2d\015\uff2d\017\uff2d\026\uff2d\027\uff2d\033\uff2d\046" +
    "\uff2d\050\uff2d\001\002\000\030\003\uff27\007\uff27\012\uff27" +
    "\014\uff27\015\uff27\017\uff27\026\uff27\027\uff27\033\uff27\046" +
    "\uff27\050\uff27\001\002\000\030\003\uff2c\007\uff2c\012\uff2c" +
    "\014\uff2c\015\uff2c\017\uff2c\026\uff2c\027\uff2c\033\uff2c\046" +
    "\uff2c\050\uff2c\001\002\000\006\003\uff29\024\uff29\001\002" +
    "\000\006\003\347\024\350\001\002\000\030\003\uff28\007" +
    "\uff28\012\uff28\014\uff28\015\uff28\017\uff28\026\uff28\027\uff28" +
    "\033\uff28\046\uff28\050\uff28\001\002\000\006\003\uff25\032" +
    "\uff25\001\002\000\006\003\351\032\352\001\002\000\006" +
    "\003\uff22\051\uff22\001\002\000\006\003\355\051\360\001" +
    "\002\000\030\003\uff26\007\uff26\012\uff26\014\uff26\015\uff26" +
    "\017\uff26\026\uff26\027\uff26\033\uff26\046\uff26\050\uff26\001" +
    "\002\000\030\003\uff23\007\uff23\012\uff23\014\uff23\015\uff23" +
    "\017\uff23\026\uff23\027\uff23\033\uff23\046\uff23\050\uff23\001" +
    "\002\000\010\003\uff12\004\uff12\052\uff1f\001\002\000\010" +
    "\003\u0115\051\360\052\uff14\001\002\000\004\052\u0108\001" +
    "\002\000\006\003\361\004\362\001\002\000\006\003\uff0f" +
    "\047\uff0f\001\002\000\006\003\364\047\365\001\002\000" +
    "\010\003\uff13\051\uff13\052\uff13\001\002\000\012\003\uff0c" +
    "\017\uff0c\026\uff0c\027\uff0c\001\002\000\012\003\374\017" +
    "\054\026\064\027\070\001\002\000\010\003\uff10\051\uff10" +
    "\052\uff10\001\002\000\014\003\uff01\015\uff01\017\uff01\026" +
    "\uff01\027\uff01\001\002\000\014\003\uff02\015\uff02\017\uff02" +
    "\026\uff02\027\uff02\001\002\000\014\003\uff03\015\uff03\017" +
    "\uff03\026\uff03\027\uff03\001\002\000\014\003\uff04\015\uff04" +
    "\017\054\026\064\027\070\001\002\000\006\003\377\015" +
    "\u0100\001\002\000\006\003\uff09\015\uff09\001\002\000\010" +
    "\003\uff0d\051\uff0d\052\uff0d\001\002\000\006\003\377\015" +
    "\u0100\001\002\000\010\003\uff06\051\uff06\052\uff06\001\002" +
    "\000\010\003\uff07\051\uff07\052\uff07\001\002\000\010\003" +
    "\uff08\051\uff08\052\uff08\001\002\000\010\003\uff0a\051\uff0a" +
    "\052\uff0a\001\002\000\006\003\uff05\015\uff05\001\002\000" +
    "\012\003\374\017\054\026\064\027\070\001\002\000\010" +
    "\003\uff0b\051\uff0b\052\uff0b\001\002\000\006\003\364\047" +
    "\365\001\002\000\010\003\uff0e\051\uff0e\052\uff0e\001\002" +
    "\000\006\003\u010b\047\u010c\001\002\000\030\003\uff20\007" +
    "\uff20\012\uff20\014\uff20\015\uff20\017\uff20\026\uff20\027\uff20" +
    "\033\uff20\046\uff20\050\uff20\001\002\000\030\003\uff1d\007" +
    "\uff1d\012\uff1d\014\uff1d\015\uff1d\017\uff1d\026\uff1d\027\uff1d" +
    "\033\uff1d\046\uff1d\050\uff1d\001\002\000\006\003\uff1b\015" +
    "\uff1b\001\002\000\006\003\u010d\015\u010e\001\002\000\030" +
    "\003\uff18\007\uff18\012\uff18\014\uff18\015\uff18\017\uff18\026" +
    "\uff18\027\uff18\033\uff18\046\uff18\050\uff18\001\002\000\006" +
    "\003\u0110\033\u0112\001\002\000\030\003\uff1c\007\uff1c\012" +
    "\uff1c\014\uff1c\015\uff1c\017\uff1c\026\uff1c\027\uff1c\033\uff1c" +
    "\046\uff1c\050\uff1c\001\002\000\030\003\uff16\007\uff16\012" +
    "\uff16\014\uff16\015\uff16\017\uff16\026\uff16\027\uff16\033\uff16" +
    "\046\uff16\050\uff16\001\002\000\030\003\uff19\007\uff19\012" +
    "\uff19\014\uff19\015\uff19\017\uff19\026\uff19\027\uff19\033\uff19" +
    "\046\uff19\050\uff19\001\002\000\030\003\uff17\007\uff17\012" +
    "\uff17\014\uff17\015\uff17\017\uff17\026\uff17\027\uff17\033\uff17" +
    "\046\uff17\050\uff17\001\002\000\006\003\u010d\015\u010e\001" +
    "\002\000\030\003\uff1a\007\uff1a\012\uff1a\014\uff1a\015\uff1a" +
    "\017\uff1a\026\uff1a\027\uff1a\033\uff1a\046\uff1a\050\uff1a\001" +
    "\002\000\006\003\uff12\004\uff12\001\002\000\004\052\uff15" +
    "\001\002\000\006\003\361\004\362\001\002\000\010\003" +
    "\uff11\051\uff11\052\uff11\001\002\000\004\052\u0108\001\002" +
    "\000\030\003\uff1e\007\uff1e\012\uff1e\014\uff1e\015\uff1e\017" +
    "\uff1e\026\uff1e\027\uff1e\033\uff1e\046\uff1e\050\uff1e\001\002" +
    "\000\006\003\355\051\360\001\002\000\030\003\uff21\007" +
    "\uff21\012\uff21\014\uff21\015\uff21\017\uff21\026\uff21\027\uff21" +
    "\033\uff21\046\uff21\050\uff21\001\002\000\006\003\351\032" +
    "\352\001\002\000\030\003\uff24\007\uff24\012\uff24\014\uff24" +
    "\015\uff24\017\uff24\026\uff24\027\uff24\033\uff24\046\uff24\050" +
    "\uff24\001\002\000\006\003\342\017\344\001\002\000\030" +
    "\003\uff2a\007\uff2a\012\uff2a\014\uff2a\015\uff2a\017\uff2a\026" +
    "\uff2a\027\uff2a\033\uff2a\046\uff2a\050\uff2a\001\002\000\006" +
    "\003\u0122\025\u0124\001\002\000\010\003\uff64\004\uff64\017" +
    "\uff64\001\002\000\030\003\uff66\007\uff66\012\uff66\014\uff66" +
    "\015\uff66\017\uff66\026\uff66\027\uff66\033\uff66\046\uff66\050" +
    "\uff66\001\002\000\010\003\u0127\004\u0129\017\u0128\001\002" +
    "\000\030\003\uff65\007\uff65\012\uff65\014\uff65\015\uff65\017" +
    "\uff65\026\uff65\027\uff65\033\uff65\046\uff65\050\uff65\001\002" +
    "\000\006\003\u012d\021\u012c\001\002\000\016\003\u012d\021" +
    "\u012c\034\uff9f\035\uff9f\036\uff9f\037\uff9f\001\002\000\016" +
    "\003\uff62\021\uff62\034\uffa0\035\uffa0\036\uffa0\037\uffa0\001" +
    "\002\000\016\003\uff5f\021\uff5f\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\001\002\000\006\003\u012d\021\u012c\001\002\000" +
    "\030\003\uff5e\007\uff5e\012\uff5e\014\uff5e\015\uff5e\017\uff5e" +
    "\026\uff5e\027\uff5e\033\uff5e\046\uff5e\050\uff5e\001\002\000" +
    "\030\003\uff5c\007\uff5c\012\uff5c\014\uff5c\015\uff5c\017\uff5c" +
    "\026\uff5c\027\uff5c\033\uff5c\046\uff5c\050\uff5c\001\002\000" +
    "\004\021\uff5b\001\002\000\004\021\u012f\001\002\000\030" +
    "\003\uff5a\007\uff5a\012\uff5a\014\uff5a\015\uff5a\017\uff5a\026" +
    "\uff5a\027\uff5a\033\uff5a\046\uff5a\050\uff5a\001\002\000\006" +
    "\003\u012d\021\u012c\001\002\000\030\003\uff61\007\uff61\012" +
    "\uff61\014\uff61\015\uff61\017\uff61\026\uff61\027\uff61\033\uff61" +
    "\046\uff61\050\uff61\001\002\000\030\003\uff5d\007\uff5d\012" +
    "\uff5d\014\uff5d\015\uff5d\017\uff5d\026\uff5d\027\uff5d\033\uff5d" +
    "\046\uff5d\050\uff5d\001\002\000\030\003\uff60\007\uff60\012" +
    "\uff60\014\uff60\015\uff60\017\uff60\026\uff60\027\uff60\033\uff60" +
    "\046\uff60\050\uff60\001\002\000\010\003\u0127\004\u0129\017" +
    "\u0128\001\002\000\030\003\uff63\007\uff63\012\uff63\014\uff63" +
    "\015\uff63\017\uff63\026\uff63\027\uff63\033\uff63\046\uff63\050" +
    "\uff63\001\002\000\010\003\uff46\007\uff46\024\uff46\001\002" +
    "\000\010\003\u013a\007\u013c\024\u013e\001\002\000\030\003" +
    "\uff48\007\uff48\012\uff48\014\uff48\015\uff48\017\uff48\026\uff48" +
    "\027\uff48\033\uff48\046\uff48\050\uff48\001\002\000\004\017" +
    "\u0156\001\002\000\004\024\uff42\001\002\000\004\024\u0151" +
    "\001\002\000\004\017\uff2e\001\002\000\030\003\uff47\007" +
    "\uff47\012\uff47\014\uff47\015\uff47\017\uff47\026\uff47\027\uff47" +
    "\033\uff47\046\uff47\050\uff47\001\002\000\006\003\u013f\032" +
    "\u0140\001\002\000\024\003\uff3f\007\uff3f\012\uff3f\014\uff3f" +
    "\017\uff3f\026\uff3f\027\uff3f\046\uff3f\050\uff3f\001\002\000" +
    "\024\003\073\007\062\012\056\014\051\017\054\026\064" +
    "\027\070\046\u0144\050\055\001\002\000\030\003\uff44\007" +
    "\uff44\012\uff44\014\uff44\015\uff44\017\uff44\026\uff44\027\uff44" +
    "\033\uff44\046\uff44\050\uff44\001\002\000\030\003\uff3c\007" +
    "\uff3c\012\uff3c\014\uff3c\015\uff3c\017\uff3c\026\uff3c\027\uff3c" +
    "\033\uff3c\046\uff3c\050\uff3c\001\002\000\030\003\uff40\007" +
    "\uff40\012\uff40\014\uff40\015\uff40\017\uff40\026\uff40\027\uff40" +
    "\033\uff40\046\uff40\050\uff40\001\002\000\010\003\u0148\004" +
    "\u014a\017\u0149\001\002\000\004\046\u0144\001\002\000\030" +
    "\003\uff3d\007\uff3d\012\uff3d\014\uff3d\015\uff3d\017\uff3d\026" +
    "\uff3d\027\uff3d\033\uff3d\046\uff3d\050\uff3d\001\002\000\030" +
    "\003\uff3b\007\uff3b\012\uff3b\014\uff3b\015\uff3b\017\uff3b\026" +
    "\uff3b\027\uff3b\033\uff3b\046\uff3b\050\uff3b\001\002\000\004" +
    "\033\u014e\001\002\000\004\033\uff39\001\002\000\004\033" +
    "\u014b\001\002\000\030\003\uff3a\007\uff3a\012\uff3a\014\uff3a" +
    "\015\uff3a\017\uff3a\026\uff3a\027\uff3a\033\uff3a\046\uff3a\050" +
    "\uff3a\001\002\000\004\033\u014d\001\002\000\030\003\uff38" +
    "\007\uff38\012\uff38\014\uff38\015\uff38\017\uff38\026\uff38\027" +
    "\uff38\033\uff38\046\uff38\050\uff38\001\002\000\030\003\uff37" +
    "\007\uff37\012\uff37\014\uff37\015\uff37\017\uff37\026\uff37\027" +
    "\uff37\033\uff37\046\uff37\050\uff37\001\002\000\024\003\073" +
    "\007\062\012\056\014\051\017\054\026\064\027\070\046" +
    "\u0144\050\055\001\002\000\030\003\uff3e\007\uff3e\012\uff3e" +
    "\014\uff3e\015\uff3e\017\uff3e\026\uff3e\027\uff3e\033\uff3e\046" +
    "\uff3e\050\uff3e\001\002\000\006\003\u013f\032\u0140\001\002" +
    "\000\030\003\uff43\007\uff43\012\uff43\014\uff43\015\uff43\017" +
    "\uff43\026\uff43\027\uff43\033\uff43\046\uff43\050\uff43\001\002" +
    "\000\004\024\u0154\001\002\000\006\003\u013f\032\u0140\001" +
    "\002\000\030\003\uff41\007\uff41\012\uff41\014\uff41\015\uff41" +
    "\017\uff41\026\uff41\027\uff41\033\uff41\046\uff41\050\uff41\001" +
    "\002\000\006\022\uff30\024\uff31\001\002\000\004\022\u0158" +
    "\001\002\000\004\007\u013c\001\002\000\004\024\uff2f\001" +
    "\002\000\010\003\u013a\007\u013c\024\u013e\001\002\000\030" +
    "\003\uff45\007\uff45\012\uff45\014\uff45\015\uff45\017\uff45\026" +
    "\uff45\027\uff45\033\uff45\046\uff45\050\uff45\001\002\000\012" +
    "\003\uff57\004\uff57\017\uff57\023\uff57\001\002\000\030\003" +
    "\uff59\007\uff59\012\uff59\014\uff59\015\uff59\017\uff59\026\uff59" +
    "\027\uff59\033\uff59\046\uff59\050\uff59\001\002\000\012\003" +
    "\110\004\114\017\111\023\106\001\002\000\030\003\uff58" +
    "\007\uff58\012\uff58\014\uff58\015\uff58\017\uff58\026\uff58\027" +
    "\uff58\033\uff58\046\uff58\050\uff58\001\002\000\006\003\u0162" +
    "\024\u0163\001\002\000\030\003\uff55\007\uff55\012\uff55\014" +
    "\uff55\015\uff55\017\uff55\026\uff55\027\uff55\033\uff55\046\uff55" +
    "\050\uff55\001\002\000\006\003\uff53\032\uff53\001\002\000" +
    "\006\003\u0164\032\u0165\001\002\000\024\003\uff50\007\uff50" +
    "\012\uff50\014\uff50\015\uff50\017\uff50\026\uff50\027\uff50\050" +
    "\uff50\001\002\000\024\003\073\007\062\012\056\014\051" +
    "\015\u0168\017\054\026\064\027\070\050\055\001\002\000" +
    "\030\003\uff54\007\uff54\012\uff54\014\uff54\015\uff54\017\uff54" +
    "\026\uff54\027\uff54\033\uff54\046\uff54\050\uff54\001\002\000" +
    "\004\033\u0170\001\002\000\004\021\u016d\001\002\000\006" +
    "\015\u016b\033\uff4d\001\002\000\030\003\uff51\007\uff51\012" +
    "\uff51\014\uff51\015\uff51\017\uff51\026\uff51\027\uff51\033\uff51" +
    "\046\uff51\050\uff51\001\002\000\004\021\u016c\001\002\000" +
    "\004\033\uff4c\001\002\000\024\003\073\007\062\012\056" +
    "\014\051\017\054\026\064\027\070\033\uff4b\050\055\001" +
    "\002\000\004\033\uff4a\001\002\000\030\003\uff4e\007\uff4e" +
    "\012\uff4e\014\uff4e\015\uff4e\017\uff4e\026\uff4e\027\uff4e\033" +
    "\uff4e\046\uff4e\050\uff4e\001\002\000\030\003\uff49\007\uff49" +
    "\012\uff49\014\uff49\015\uff49\017\uff49\026\uff49\027\uff49\033" +
    "\uff49\046\uff49\050\uff49\001\002\000\024\003\073\007\062" +
    "\012\056\014\051\015\u0168\017\054\026\064\027\070\050" +
    "\055\001\002\000\030\003\uff4f\007\uff4f\012\uff4f\014\uff4f" +
    "\015\uff4f\017\uff4f\026\uff4f\027\uff4f\033\uff4f\046\uff4f\050" +
    "\uff4f\001\002\000\006\003\u0164\032\u0165\001\002\000\030" +
    "\003\uff52\007\uff52\012\uff52\014\uff52\015\uff52\017\uff52\026" +
    "\uff52\027\uff52\033\uff52\046\uff52\050\uff52\001\002\000\012" +
    "\003\110\004\114\017\111\023\106\001\002\000\030\003" +
    "\uff56\007\uff56\012\uff56\014\uff56\015\uff56\017\uff56\026\uff56" +
    "\027\uff56\033\uff56\046\uff56\050\uff56\001\002\000\024\003" +
    "\066\007\062\012\056\014\051\017\054\026\064\027\070" +
    "\033\053\050\055\001\002\000\004\002\uffe0\001\002\000" +
    "\006\003\044\032\046\001\002\000\004\002\uffe3\001\002" +
    "\000\006\003\041\024\043\001\002\000\004\002\uffe6\001" +
    "\002\000\006\003\037\023\040\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\000\001\002\000\006\003\ufffb\030" +
    "\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\012\002\003\005\005\015\011\021\004\001" +
    "\001\000\002\001\001\000\006\005\u017f\021\004\001\001" +
    "\000\004\015\u017e\001\001\000\004\161\u017c\001\001\000" +
    "\004\003\035\001\001\000\004\162\012\001\001\000\002" +
    "\001\001\000\004\022\013\001\001\000\002\001\001\000" +
    "\004\164\033\001\001\000\004\163\016\001\001\000\006" +
    "\017\021\023\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\165\031\001\001\000\004" +
    "\020\024\001\001\000\002\001\001\000\004\166\026\001" +
    "\001\000\004\030\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\032\001\001\000\002\001\001\000" +
    "\006\017\021\023\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\167\u017a\001\001\000\004\011\041\001" +
    "\001\000\004\170\u0178\001\001\000\002\001\001\000\004" +
    "\013\044\001\001\000\004\171\u0176\001\001\000\002\001" +
    "\001\000\030\014\057\031\066\032\056\033\064\034\047" +
    "\035\062\036\046\037\070\124\051\125\060\140\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\u015c" +
    "\001\001\000\004\126\u0137\001\001\000\002\001\001\000" +
    "\004\226\u0120\001\001\000\004\141\340\001\001\000\004" +
    "\214\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\135\332\001\001\000\002\001\001" +
    "\000\004\173\277\001\001\000\002\001\001\000\010\172" +
    "\273\215\074\242\075\001\001\000\002\001\001\000\004" +
    "\202\244\001\001\000\026\031\073\032\056\033\064\034" +
    "\047\035\062\036\046\037\070\124\051\125\060\140\071" +
    "\001\001\000\002\001\001\000\006\215\074\242\075\001" +
    "\001\000\002\001\001\000\004\057\101\001\001\000\004" +
    "\135\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\060\112\065\103\101\104\102\106\104\102\111\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\210\001\001\000\002\001\001\000\026\050\135\051\140" +
    "\052\133\053\134\054\131\055\132\075\175\102\106\104" +
    "\102\111\173\001\001\000\006\074\120\107\171\001\001" +
    "\000\004\224\167\001\001\000\004\223\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\222\114\001\001" +
    "\000\006\074\120\107\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\102\130\110\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\135\051\140\052\133" +
    "\053\134\054\131\055\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\225\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\210\163\001\001\000\004\212\161\001" +
    "\001\000\004\213\157\001\001\000\004\211\153\001\001" +
    "\000\020\050\156\051\140\052\133\053\134\054\131\055" +
    "\154\056\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\050\156\051\140\052\133\053" +
    "\134\054\131\055\154\056\160\001\001\000\002\001\001" +
    "\000\020\050\156\051\140\052\133\053\134\054\131\055" +
    "\154\056\162\001\001\000\002\001\001\000\020\050\156" +
    "\051\140\052\133\053\134\054\131\055\154\056\164\001" +
    "\001\000\002\001\001\000\006\074\120\107\166\001\001" +
    "\000\002\001\001\000\006\074\120\107\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\224\167\001\001" +
    "\000\004\112\177\001\001\000\004\223\165\001\001\000" +
    "\002\001\001\000\004\222\114\001\001\000\002\001\001" +
    "\000\006\076\201\100\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\101\207\113\206\001\001\000\002" +
    "\001\001\000\012\075\175\102\106\104\102\111\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\212\001\001\000\002\001\001\000\004\216" +
    "\242\001\001\000\030\031\217\032\056\033\064\034\047" +
    "\035\062\036\046\037\070\063\215\124\051\125\060\140" +
    "\071\001\001\000\002\001\001\000\010\215\074\217\240" +
    "\242\075\001\001\000\004\106\220\001\001\000\002\001" +
    "\001\000\004\064\222\001\001\000\002\001\001\000\004" +
    "\066\226\001\001\000\004\220\236\001\001\000\030\031" +
    "\231\032\056\033\064\034\047\035\062\036\046\037\070" +
    "\067\227\124\051\125\060\140\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\215\074\221\234\242\075" +
    "\001\001\000\004\070\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\235\001\001\000\002\001\001" +
    "\000\030\031\231\032\056\033\064\034\047\035\062\036" +
    "\046\037\070\067\237\124\051\125\060\140\071\001\001" +
    "\000\002\001\001\000\004\106\241\001\001\000\002\001" +
    "\001\000\030\031\217\032\056\033\064\034\047\035\062" +
    "\036\046\037\070\063\243\124\051\125\060\140\071\001" +
    "\001\000\002\001\001\000\004\040\247\001\001\000\004" +
    "\203\270\001\001\000\004\041\251\001\001\000\002\001" +
    "\001\000\004\205\266\001\001\000\002\001\001\000\004" +
    "\204\253\001\001\000\004\042\255\001\001\000\004\206" +
    "\264\001\001\000\002\001\001\000\004\043\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\207\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\265" +
    "\001\001\000\002\001\001\000\004\042\267\001\001\000" +
    "\002\001\001\000\004\041\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\302" +
    "\001\001\000\004\174\330\001\001\000\020\045\307\050" +
    "\303\051\140\052\133\053\134\054\131\055\132\001\001" +
    "\000\002\001\001\000\004\046\327\001\001\000\004\177" +
    "\325\001\001\000\004\175\323\001\001\000\004\176\310" +
    "\001\001\000\002\001\001\000\004\046\312\001\001\000" +
    "\004\200\321\001\001\000\002\001\001\000\004\047\316" +
    "\001\001\000\002\001\001\000\004\201\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\322\001\001\000\002\001\001\000\004\046\324\001" +
    "\001\000\002\001\001\000\004\046\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\045\331\050\303\051" +
    "\140\052\133\053\134\054\131\055\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\335\001\001\000\002\001\001\000\004\244\u011e\001\001" +
    "\000\004\142\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\245\344\001\001\000\004" +
    "\143\345\001\001\000\002\001\001\000\004\246\u011c\001" +
    "\001\000\004\144\352\001\001\000\004\247\u011a\001\001" +
    "\000\010\137\356\145\353\153\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\250\u0118\252\u0116\001\001" +
    "\000\006\137\u0115\153\355\001\001\000\004\152\u0108\001" +
    "\001\000\004\154\362\001\001\000\004\253\u0105\001\001" +
    "\000\004\155\365\001\001\000\002\001\001\000\004\254" +
    "\u0103\001\001\000\016\034\366\035\370\036\367\151\371" +
    "\156\374\157\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\366" +
    "\035\370\036\367\151\371\157\u0102\001\001\000\004\160" +
    "\u0101\001\001\000\004\255\375\001\001\000\002\001\001" +
    "\000\004\160\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\034\366\035\370\036\367\151\371\156\u0104\157" +
    "\372\001\001\000\002\001\001\000\004\155\u0106\001\001" +
    "\000\002\001\001\000\004\147\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\251\u0112\001\001\000\004" +
    "\150\u010e\001\001\000\002\001\001\000\004\146\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\150\u0113\001\001\000\002\001" +
    "\001\000\004\252\u0116\001\001\000\002\001\001\000\004" +
    "\154\u0117\001\001\000\002\001\001\000\004\152\u0119\001" +
    "\001\000\002\001\001\000\010\137\356\145\u011b\153\355" +
    "\001\001\000\002\001\001\000\004\144\u011d\001\001\000" +
    "\002\001\001\000\004\142\u011f\001\001\000\002\001\001" +
    "\000\004\071\u0122\001\001\000\004\227\u0133\001\001\000" +
    "\002\001\001\000\020\050\u0125\051\140\052\133\053\134" +
    "\054\131\055\132\072\u0124\001\001\000\002\001\001\000" +
    "\004\073\u0132\001\001\000\004\073\u0131\001\001\000\004" +
    "\230\u012f\001\001\000\004\231\u0129\001\001\000\004\073" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\232\u012d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\050\u0125\051\140\052\133\053" +
    "\134\054\131\055\132\072\u0134\001\001\000\002\001\001" +
    "\000\004\236\u0159\001\001\000\010\127\u013c\133\u013a\134" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\237\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\130\u0140\001\001\000\004\240\u014e" +
    "\001\001\000\032\031\u0144\032\056\033\064\034\047\035" +
    "\062\036\046\037\070\124\051\125\060\131\u0142\132\u0141" +
    "\140\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\136\u0146\001\001\000\004\132\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\241\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\031\u0144\032\056\033\064\034\047\035\062" +
    "\036\046\037\070\124\051\125\060\131\u014f\132\u0141\140" +
    "\071\001\001\000\002\001\001\000\004\130\u0151\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\130\u0154\001" +
    "\001\000\002\001\001\000\004\243\u0156\001\001\000\002" +
    "\001\001\000\006\133\u0158\134\u0138\001\001\000\002\001" +
    "\001\000\010\127\u015a\133\u013a\134\u0138\001\001\000\002" +
    "\001\001\000\004\233\u0174\001\001\000\002\001\001\000" +
    "\016\065\u015f\101\104\102\106\104\102\111\111\116\u015e" +
    "\001\001\000\002\001\001\000\004\117\u0160\001\001\000" +
    "\002\001\001\000\004\234\u0172\001\001\000\004\120\u0165" +
    "\001\001\000\004\235\u0170\001\001\000\032\031\u0168\032" +
    "\056\033\064\034\047\035\062\036\046\037\070\121\u0169" +
    "\123\u0166\124\051\125\060\140\071\001\001\000\002\001" +
    "\001\000\004\122\u016e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\u016d\032\056\033\064\034\047\035\062" +
    "\036\046\037\070\124\051\125\060\140\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\031\u0168\032\056\033\064\034\047\035\062\036\046\037" +
    "\070\121\u0171\123\u0166\124\051\125\060\140\071\001\001" +
    "\000\002\001\001\000\004\120\u0173\001\001\000\002\001" +
    "\001\000\016\065\u015f\101\104\102\106\104\102\111\111" +
    "\116\u0175\001\001\000\002\001\001\000\030\014\u0177\031" +
    "\066\032\056\033\064\034\047\035\062\036\046\037\070" +
    "\124\051\125\060\140\071\001\001\000\002\001\001\000" +
    "\004\013\u0179\001\001\000\002\001\001\000\004\011\u017b" +
    "\001\001\000\002\001\001\000\004\003\u017d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public  ArrayList<String> expectedTokens_msg = new ArrayList<String>();
    public  ArrayList<String> errorsLines = new ArrayList<String>();
    public  ArrayList<String> errors = new ArrayList<String>();
    public  ArrayList<String> getExpectedTokens() {
        return expectedTokens_msg;
    }

    public ArrayList<String> getLineErrors() {
        return errorsLines;
    }
    public ArrayList<String> getErrors() {
        return errors;
    }

    protected void report_expected_token_ids() {

        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected : ids) {
            if (!(symbl_name_from_id(expected).equals("EOF") || symbl_name_from_id(expected).equals("error")))
                list.add(symbl_name_from_id(expected));
          }
        String msg = "expected tokens are "+ list;
        expectedTokens_msg.add(msg);
        System.err.println(msg);  
    }
    
    public void syntax_error(Symbol s){
        String msg = "Syntax error: "+" Line: " + s.left +" Column: " +s.right;
        String symbolName = symbl_name_from_id(s.sym);
        msg += "\nCurrent: " + symbolName + "\n";

        errorsLines.add(msg);
        System.err.print(msg);
      
        report_expected_token_ids();
    }
    
    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{   
        
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    public void printError(String pMsg){
        System.err.println(pMsg+"\n");
        errors.add(pMsg+"\n");        
    }

    public void report_fatal_error(String message, Object info) {

        //report_error(message, info);
        //System.exit(1);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= variables_list lmain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= lmain 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lmain ::= MAIN main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
 printError("Missing main token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lmain ::= error NT$0 main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables_list ::= variables_elem variables_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables_list ::= variables_elem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                                    Symbol symbolT= new Symbol(0,tleft,tright,t);
                                    SR_Type type= new SR_Type (symbolT);
                                    type.setType(sym.TYPE_NUM);
                                    SemanticStack.getInstance().push(type);
                              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables_elem ::= TYPE_NUM NT$1 variables_elem_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.IDENTIFIER,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_elem_one ::= IDENTIFIER NT$2 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
 printError("Missing Type token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",114, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables_elem_one ::= error NT$3 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables_elem_two ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalUn();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables_elem_two ::= assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_elem_two ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // end_decl ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // end_decl ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assign ::= ASSIGN assign_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
 printError("Missing = token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign ::= error NT$4 assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",116, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign_one ::= LITERAL_NUM NT$5 assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_one",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign_two ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalIn();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_two",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // main ::= LPAR mainn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",117, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // main ::= error NT$6 mainn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mainn ::= RPAR mainnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",118, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainn ::= error NT$7 mainnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainnn ::= BEGIN mainnnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",119, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mainnn ::= error NT$8 mainnnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainnnn ::= content END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainnnn ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",120, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mainnnn ::= error NT$9 fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fin ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fin ::= error 
            {
              Object RESULT =null;
		 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // content ::= structures content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // content ::= structures 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structures ::= if_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structures ::= putw_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // structures ::= puts_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // structures ::= while_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // structures ::= declar_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // structures ::= funct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // structures ::= switch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                           Symbol symbol= new Symbol(sym.PUTS,pleft,pright,p);
                           SR_PUTW register= new SR_PUTW(symbol);
                           SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",121, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // putw_struct ::= PUTW NT$10 putw_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // putw_struct_one ::= LPAR putw_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$11 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",122, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // putw_struct_one ::= error NT$11 putw_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // putw_struct_two ::= arithmetic putw_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // putw_struct_two ::= IDENTIFIER NT$12 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolDO= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolDO,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",124, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // putw_struct_two ::= LITERAL_NUM NT$13 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$14 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",125, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // putw_struct_two ::= error NT$14 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // putw_struct_three ::= RPAR putw_struct_fourth 
            {
              Object RESULT =null;
		 RWEvaluator.getInstance().evalPutw(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$15 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",126, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // putw_struct_three ::= error NT$15 putw_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // putw_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$16 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",127, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // putw_struct_fourth ::= error NT$16 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$17 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                           Symbol symbol= new Symbol(sym.PUTS,pleft,pright,p);
                           SR_PUTS register= new SR_PUTS(symbol);
                           SemanticStack.getInstance().push(register);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",128, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // puts_struct ::= PUTS NT$17 puts_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // puts_struct_one ::= LPAR puts_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$18 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",129, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // puts_struct_one ::= error NT$18 puts_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                                            Symbol symbol= new Symbol(0,sleft,sright,s);
                                            SR_DO sr_do = new SR_DO(symbol,"char");
                                            SemanticStack.getInstance().push(sr_do);
                                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",130, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // puts_struct_two ::= LITERAL_CONSTANT NT$19 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$20 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",131, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // puts_struct_two ::= error NT$20 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // puts_struct_three ::= RPAR puts_struct_fourth 
            {
              Object RESULT =null;
		 RWEvaluator.getInstance().evalPuts(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$21 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$21",132, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // puts_struct_three ::= error NT$21 puts_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // puts_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$22 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$22",133, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // puts_struct_fourth ::= error NT$22 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arithmetic ::= add 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arithmetic ::= subs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arithmetic ::= mult 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arithmetic ::= div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$23 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$23",134, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mult ::= params MULT NT$23 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mult",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$24 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$24",135, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // div ::= params DIV NT$24 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("div",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$25 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$25",136, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // add ::= params PLUS NT$25 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("add",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$26 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$26",137, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // subs ::= params MINUS NT$26 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subs",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // _aux ::= arithmetic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // _aux ::= params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // params ::= LITERAL_NUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // params ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // params ::= error 
            {
              Object RESULT =null;
		 printError("Missing parameter token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$27 ::= 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbol = new Symbol(0,iffleft,iffright,iff);
                 SR_If register = new SR_If(symbol);
                 SemanticStack.getInstance().push(register);
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$27",138, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_struct ::= IF NT$27 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$28 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$28",139, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_struct ::= error NT$28 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_struct_one ::= LPAR if_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_one",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_struct_two ::= condition if_struct_three 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_two",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_struct_three ::= RPAR if_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_three",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_struct_four ::= BEGIN if_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$29 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$29",140, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_struct_four ::= error NT$29 if_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_struct_five ::= content if_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$30 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$30",141, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_struct_five ::= error NT$30 if_struct_six 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_struct_six ::= END else_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // else_struct ::= ELSE else_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_struct_one ::= BEGIN else_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$31 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$31",142, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_struct_one ::= error NT$31 else_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_struct_two ::= content else_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$32 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$32",143, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // else_struct_two ::= error NT$32 else_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // else_struct_three ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_three",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condition ::= condition_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condition ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condition_aux ::= condition_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condition_aux ::= error 
            {
              Object RESULT =null;
		 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$33 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$33",144, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condition_one ::= LITERAL_NUM NT$33 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$34 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$34",145, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condition_one ::= IDENTIFIER NT$34 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condition_one ::= arithmetic_aux condition_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$35 ::= 
            {
              Object RESULT =null;
 printError("Missing literal_num or Idendifier or arithmetic expression token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$35",146, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condition_one ::= error NT$35 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // condition_two ::= comparison condition_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_two",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condition_three ::= LITERAL_NUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // condition_three ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // condition_three ::= arithmetic_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // condition_three ::= error 
            {
              Object RESULT =null;
		 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithmetic_aux ::= LPAR arithmetic arithmetic_aux_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithmetic_aux_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$36 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$36",147, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arithmetic_aux_one ::= error NT$36 RPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // exp ::= LPAR expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= condition_aux expr_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_one ::= RPAR expr_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_two ::= logic_comparison expr_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_two",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_three ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_three",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // comparison ::= LOWER 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // comparison ::= HIGHER 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // comparison ::= EQUALS 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // comparison ::= DIFFERENT 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logic_comparison ::= AND 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logic_comparison ::= OR 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$37 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.IDENTIFIER,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$37",148, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declar_assign ::= IDENTIFIER NT$37 declar_assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declar_assign_one ::= ASSIGN declar_assign_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$38 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$38",149, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declar_assign_one ::= error NT$38 declar_assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$39 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$39",150, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declar_assign_two ::= IDENTIFIER NT$39 declar_assign_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // declar_assign_two ::= arithmetic declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$40 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.LITERAL_NUM,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$40",151, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declar_assign_two ::= LITERAL_NUM NT$40 declar_assign_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declar_assign_two ::= error declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declar_assign_three ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalAssign();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$41 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$41",152, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declar_assign_three ::= error NT$41 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // while_struct ::= WHILE while_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // while_struct_one ::= LPAR while_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$42 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$42",153, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // while_struct_one ::= error NT$42 while_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // while_struct_two ::= condition while_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_two",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // while_struct_three ::= RPAR while_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$43 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$43",154, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // while_struct_three ::= error NT$43 while_struct_four 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // while_struct_four ::= BEGIN while_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$44 ::= 
            {
              Object RESULT =null;
 printError("Missing { token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$44",155, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // while_struct_four ::= error NT$44 while_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // while_struct_five ::= while_struct_aux while_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_five",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // while_struct_aux ::= content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // while_struct_aux ::= content BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // while_struct_aux ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // while_struct_aux ::= BREAK SEMICOLON content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // while_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_six",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // funct ::= init_decl funct_sec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // funct_sec ::= LPAR funct_third 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_sec",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$45 ::= 
            {
              Object RESULT =null;
printError("Missing ( token");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$45",156, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // funct_sec ::= error NT$45 funct_third 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_sec",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // funct_third ::= RPAR funct_fourth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_third",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // funct_third ::= parameters RPAR funct_fourth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_third",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$46 ::= 
            {
              Object RESULT =null;
printError("Missing ) token");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$46",157, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // funct_third ::= error NT$46 RPAR funct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_third",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // funct_fourth ::= BEGIN funct_fifth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fourth",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$47 ::= 
            {
              Object RESULT =null;
printError("Missing { token");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$47",158, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // funct_fourth ::= error NT$47 funct_fifth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fourth",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // funct_fifth ::= content funct_sixth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fifth",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // funct_fifth ::= funct_sixth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fifth",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // funct_sixth ::= RETURN funct_seventh 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_sixth",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // funct_seventh ::= LITERAL_NUM END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_seventh",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$48 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                    VariableEvaluator.getInstance().Exist();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$48",159, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // funct_seventh ::= IDENTIFIER NT$48 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_seventh",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // funct_seventh ::= error END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_seventh",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // init_decl ::= TYPE_NUM error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // init_decl ::= TYPE_NUM init_decl_one 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
        Symbol symbolID = new Symbol(0,valleft,valright,val);
        SR_Type type = new SR_Type(symbolID);
        type.setType(sym.TYPE_NUM);
        SemanticStack.getInstance().push(type); 
        
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$49 ::= 
            {
              Object RESULT =null;
 printError("Type not specified"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$49",160, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // init_decl ::= error NT$49 init_decl_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // init_decl_one ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl_one",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // parameters ::= primitiveType IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
               SR_ID srId = new SR_ID(symbol);
               SemanticStack.getInstance().push(srId);

               VariableEvaluator.getInstance().evalUn();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$50 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                    VariableEvaluator.getInstance().evalUn();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$50",161, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parameters ::= primitiveType IDENTIFIER NT$50 COMMA parameters 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // primitiveType ::= TYPE_NUM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        Symbol symbolID= new Symbol(0,valleft,valright,val);
                        SR_Type type= new SR_Type(symbolID);
                        type.setType(sym.TYPE_NUM);
                        SemanticStack.getInstance().push(type);

                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("primitiveType",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // switch ::= SWITCH switch_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // switch_one ::= LPAR switch_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_one",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$51 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$51",162, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // switch_one ::= error NT$51 switch_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_one",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$52 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                    VariableEvaluator.getInstance().Exist();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$52",163, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // switch_two ::= IDENTIFIER NT$52 switch_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_two",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // switch_two ::= error 
            {
              Object RESULT =null;
		 printError("Missing Variable token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_two",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // switch_three ::= RPAR switch_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_three",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$53 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$53",164, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // switch_three ::= error NT$53 switch_four 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_three",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // switch_four ::= BEGIN switch_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_four",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$54 ::= 
            {
              Object RESULT =null;
 printError("Missing { token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$54",165, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // switch_four ::= error NT$54 switch_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_four",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // switch_five ::= case_stms switch_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_five",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$55 ::= 
            {
              Object RESULT =null;
 printError("Missing { token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$55",166, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // switch_five ::= error NT$55 switch_six 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_five",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // switch_six ::= DEFAULT switch_seven 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_six",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // switch_seven ::= COLON switch_eight 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_seven",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$56 ::= 
            {
              Object RESULT =null;
 printError("Missing : token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$56",167, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // switch_seven ::= error NT$56 switch_eight 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_seven",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // switch_eight ::= BREAK switch_nine 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_eight",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // switch_eight ::= error 
            {
              Object RESULT =null;
		 printError("Missing break token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_eight",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // switch_nine ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_nine",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // switch_nine ::= error 
            {
              Object RESULT =null;
		 printError("Missing } token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_nine",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // case_stms ::= case case_stms 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_stms",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // case_stms ::= case 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_stms",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // case ::= CASE case_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$57 ::= 
            {
              Object RESULT =null;
 printError("Missing CASE token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$57",168, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // case ::= error NT$57 case_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // case_one ::= LITERAL_NUM case_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_one",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // NT$58 ::= 
            {
              Object RESULT =null;
 printError("Missing Literal_num token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$58",169, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // case_one ::= error NT$58 case_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_one",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // case_two ::= COLON case_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_two",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$59 ::= 
            {
              Object RESULT =null;
 printError("Missing : token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$59",170, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // case_two ::= error NT$59 case_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_two",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // case_three ::= case_content case_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_three",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NT$60 ::= 
            {
              Object RESULT =null;
 printError("Missing break token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$60",171, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // case_three ::= error NT$60 case_four 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_three",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // case_four ::= BREAK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_four",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // case_four ::= error 
            {
              Object RESULT =null;
		 printError("Missing } token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_four",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // case_content ::= case_structures case_content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_content",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // case_content ::= case_structures 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_content",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // case_structures ::= putw_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_structures",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // case_structures ::= puts_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_structures",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // case_structures ::= declar_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_structures",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
