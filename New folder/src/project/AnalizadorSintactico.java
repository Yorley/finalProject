
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package project;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import project.semantic.evaluators.*;
import project.semantic.SemanticStack;
import project.semantic.SymbolTable.SymbolTable;
import project.semantic.registers.*;
import project.semantic.Writer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\015\004\000\002\124\002\000\002\015\005" +
    "\000\002\005\004\000\002\005\003\000\002\125\002\000" +
    "\002\021\005\000\002\126\002\000\002\022\005\000\002" +
    "\127\002\000\002\022\005\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\025\003\000\002\025\003" +
    "\000\002\017\004\000\002\130\002\000\002\017\005\000" +
    "\002\131\002\000\002\020\005\000\002\030\003\000\002" +
    "\003\004\000\002\132\002\000\002\003\005\000\002\011" +
    "\004\000\002\133\002\000\002\011\005\000\002\013\004" +
    "\000\002\134\002\000\002\013\005\000\002\014\004\000" +
    "\002\014\003\000\002\135\002\000\002\014\005\000\002" +
    "\012\003\000\002\012\003\000\002\031\004\000\002\031" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\136\002\000" +
    "\002\035\005\000\002\044\004\000\002\137\002\000\002" +
    "\044\005\000\002\045\004\000\002\140\002\000\002\045" +
    "\005\000\002\141\002\000\002\045\005\000\002\142\002" +
    "\000\002\045\005\000\002\046\004\000\002\143\002\000" +
    "\002\046\005\000\002\047\003\000\002\144\002\000\002" +
    "\047\005\000\002\145\002\000\002\036\005\000\002\040" +
    "\004\000\002\146\002\000\002\040\005\000\002\147\002" +
    "\000\002\041\005\000\002\150\002\000\002\041\005\000" +
    "\002\042\004\000\002\151\002\000\002\042\005\000\002" +
    "\043\003\000\002\152\002\000\002\043\005\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\153\002\000\002\053\006\000\002\154\002\000" +
    "\002\054\006\000\002\155\002\000\002\051\006\000\002" +
    "\156\002\000\002\052\006\000\002\056\003\000\002\056" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\157\002\000\002\032\005\000\002\160\002\000" +
    "\002\032\005\000\002\057\004\000\002\060\004\000\002" +
    "\061\004\000\002\062\004\000\002\161\002\000\002\062" +
    "\005\000\002\063\004\000\002\162\002\000\002\063\005" +
    "\000\002\106\003\000\002\106\004\000\002\064\004\000" +
    "\002\066\004\000\002\163\002\000\002\066\005\000\002" +
    "\067\004\000\002\164\002\000\002\067\005\000\002\070" +
    "\003\000\002\065\003\000\002\065\003\000\002\111\003" +
    "\000\002\111\003\000\002\165\002\000\002\104\005\000" +
    "\002\166\002\000\002\104\005\000\002\104\004\000\002" +
    "\167\002\000\002\104\005\000\002\107\004\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\102\005\000\002\105\003\000\002\170\002\000" +
    "\002\105\005\000\002\101\004\000\002\075\004\000\002" +
    "\112\004\000\002\112\003\000\002\076\004\000\002\113" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\100\003\000\002\100\003\000" +
    "\002\171\002\000\002\034\005\000\002\071\004\000\002" +
    "\172\002\000\002\071\005\000\002\173\002\000\002\072" +
    "\005\000\002\072\004\000\002\174\002\000\002\072\005" +
    "\000\002\072\004\000\002\073\003\000\002\175\002\000" +
    "\002\073\005\000\002\033\004\000\002\115\004\000\002" +
    "\176\002\000\002\115\005\000\002\116\004\000\002\117" +
    "\004\000\002\177\002\000\002\117\005\000\002\120\004" +
    "\000\002\200\002\000\002\120\005\000\002\121\004\000" +
    "\002\123\003\000\002\123\005\000\002\123\004\000\002" +
    "\123\005\000\002\122\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\010\003\007\007\011\030\010\001\002\000" +
    "\004\002\u010f\001\002\000\010\003\ufffa\007\011\030\ufffa" +
    "\001\002\000\006\003\007\030\010\001\002\000\006\003" +
    "\ufffd\023\ufffd\001\002\000\006\003\037\023\040\001\002" +
    "\000\006\003\ufff9\017\ufff9\001\002\000\004\002\uffff\001" +
    "\002\000\006\003\015\017\016\001\002\000\010\003\ufff8" +
    "\007\ufff8\030\ufff8\001\002\000\010\003\ufff5\021\ufff5\025" +
    "\ufff5\001\002\000\010\003\ufff7\021\ufff7\025\ufff7\001\002" +
    "\000\010\003\023\021\021\025\024\001\002\000\010\003" +
    "\ufff6\007\ufff6\030\ufff6\001\002\000\010\003\ufff3\007\ufff3" +
    "\030\ufff3\001\002\000\010\003\ufff2\007\ufff2\030\ufff2\001" +
    "\002\000\012\003\ufff1\004\uffed\007\ufff1\030\ufff1\001\002" +
    "\000\004\004\026\001\002\000\010\003\uffee\007\uffee\030" +
    "\uffee\001\002\000\004\021\uffeb\001\002\000\004\021\030" +
    "\001\002\000\010\003\uffe9\007\uffe9\030\uffe9\001\002\000" +
    "\010\003\uffea\007\uffea\030\uffea\001\002\000\004\004\026" +
    "\001\002\000\010\003\uffec\007\uffec\030\uffec\001\002\000" +
    "\010\003\023\021\021\025\024\001\002\000\010\003\ufff4" +
    "\007\ufff4\030\ufff4\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\uffe7\024\uffe7\001\002\000\006\003\041\024\043" +
    "\001\002\000\006\003\uffe4\032\uffe4\001\002\000\004\002" +
    "\uffe8\001\002\000\006\003\044\032\046\001\002\000\020" +
    "\003\uffe1\012\uffe1\014\uffe1\017\uffe1\026\uffe1\027\uffe1\033" +
    "\uffe1\001\002\000\004\002\uffe5\001\002\000\020\003\057" +
    "\012\053\014\047\017\060\026\056\027\061\033\063\001" +
    "\002\000\006\003\352\023\354\001\002\000\022\003\uffd7" +
    "\012\uffd7\014\uffd7\015\uffd7\017\uffd7\026\uffd7\027\uffd7\033" +
    "\uffd7\001\002\000\022\003\uffd3\012\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\026\uffd3\027\uffd3\033\uffd3\001\002\000\022\003" +
    "\uffd5\012\uffd5\014\uffd5\015\uffd5\017\uffd5\026\uffd5\027\uffd5" +
    "\033\uffd5\001\002\000\004\023\uffa0\001\002\000\022\003" +
    "\uffd6\012\uffd6\014\uffd6\015\uffd6\017\uffd6\026\uffd6\027\uffd6" +
    "\033\uffd6\001\002\000\004\033\347\001\002\000\006\003" +
    "\uffd2\023\uffd2\001\002\000\010\003\uffdd\023\uff9e\033\uffdd" +
    "\001\002\000\006\003\uff69\025\uff69\001\002\000\006\003" +
    "\uffc0\023\uffc0\001\002\000\022\003\uffd4\012\uffd4\014\uffd4" +
    "\015\uffd4\017\uffd4\026\uffd4\027\uffd4\033\uffd4\001\002\000" +
    "\004\002\uffde\001\002\000\004\002\uffe2\001\002\000\022" +
    "\003\067\012\053\014\047\015\uffd8\017\060\026\056\027" +
    "\061\033\uffd8\001\002\000\006\015\uffd9\033\uffd9\001\002" +
    "\000\004\023\uff9e\001\002\000\004\023\071\001\002\000" +
    "\012\003\100\004\104\017\101\023\076\001\002\000\022" +
    "\003\uff9d\012\uff9d\014\uff9d\015\uff9d\017\uff9d\026\uff9d\027" +
    "\uff9d\033\uff9d\001\002\000\006\003\uff87\024\uff87\001\002" +
    "\000\004\024\202\001\002\000\006\003\uff88\024\uff88\001" +
    "\002\000\012\003\163\004\167\017\165\023\116\001\002" +
    "\000\012\042\112\043\106\044\107\045\110\001\002\000" +
    "\016\003\uff86\024\uff86\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\001\002\000\012\042\uff83\043\uff83\044\uff83\045\uff83\001" +
    "\002\000\006\003\uff89\024\uff89\001\002\000\022\003\uff9c" +
    "\012\uff9c\014\uff9c\015\uff9c\017\uff9c\026\uff9c\027\uff9c\033" +
    "\uff9c\001\002\000\012\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\001\002\000\012\042\112\043\106\044\107\045\110\001" +
    "\002\000\012\003\uff6f\004\uff6f\017\uff6f\023\uff6f\001\002" +
    "\000\012\003\uff6d\004\uff6d\017\uff6d\023\uff6d\001\002\000" +
    "\012\003\uff6c\004\uff6c\017\uff6c\023\uff6c\001\002\000\012" +
    "\003\115\004\117\017\120\023\116\001\002\000\012\003" +
    "\uff6e\004\uff6e\017\uff6e\023\uff6e\001\002\000\006\003\uff84" +
    "\024\uff84\001\002\000\006\003\uff7e\024\uff7e\001\002\000" +
    "\006\003\uff7a\024\uff7a\001\002\000\010\003\127\004\132" +
    "\017\130\001\002\000\006\003\uff7d\024\uff7d\001\002\000" +
    "\006\003\uff7c\024\uff7c\001\002\000\006\003\uff7b\024\uff7b" +
    "\001\002\000\010\003\uffae\021\uffae\024\uffae\001\002\000" +
    "\012\034\141\035\142\036\140\037\143\001\002\000\010" +
    "\003\uffb0\021\uffb0\024\uffb0\001\002\000\010\003\uffaf\021" +
    "\uffaf\024\uffaf\001\002\000\006\003\133\024\135\001\002" +
    "\000\020\003\uffa1\021\uffa1\024\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\001\002\000\020\003\uffa2\021\uffa2\024\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\001\002\000\010\003" +
    "\uffb1\021\uffb1\024\uffb1\001\002\000\020\003\uffa3\021\uffa3" +
    "\024\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\001\002\000" +
    "\004\024\uff77\001\002\000\016\003\uff79\024\uff79\042\uff79" +
    "\043\uff79\044\uff79\045\uff79\001\002\000\016\003\uff78\024" +
    "\uff78\042\uff78\043\uff78\044\uff78\045\uff78\001\002\000\004" +
    "\024\137\001\002\000\016\003\uff76\024\uff76\042\uff76\043" +
    "\uff76\044\uff76\045\uff76\001\002\000\010\003\uffad\004\uffad" +
    "\017\uffad\001\002\000\010\003\uffa9\004\uffa9\017\uffa9\001" +
    "\002\000\010\003\uffa7\004\uffa7\017\uffa7\001\002\000\010" +
    "\003\uffab\004\uffab\017\uffab\001\002\000\010\003\127\004" +
    "\132\017\130\001\002\000\020\003\uffa4\021\uffa4\024\uffa4" +
    "\034\141\035\142\036\140\037\143\001\002\000\010\003" +
    "\uffaa\021\uffaa\024\uffaa\001\002\000\010\003\uffa5\021\uffa5" +
    "\024\uffa5\001\002\000\010\003\127\004\132\017\130\001" +
    "\002\000\010\003\uffa6\021\uffa6\024\uffa6\001\002\000\010" +
    "\003\127\004\132\017\130\001\002\000\010\003\uffa8\021" +
    "\uffa8\024\uffa8\001\002\000\010\003\127\004\132\017\130" +
    "\001\002\000\010\003\uffac\021\uffac\024\uffac\001\002\000" +
    "\012\042\112\043\106\044\107\045\110\001\002\000\006" +
    "\003\uff82\024\uff82\001\002\000\012\042\112\043\106\044" +
    "\107\045\110\001\002\000\006\003\uff7f\024\uff7f\001\002" +
    "\000\006\003\uff81\024\uff81\001\002\000\024\024\uff86\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\042\uff80\043\uff80\044\uff80" +
    "\045\uff80\001\002\000\004\024\171\001\002\000\022\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\001\002\000\006\003\uff75\024\uff75\001\002\000" +
    "\022\034\uffa3\035\uffa3\036\uffa3\037\uffa3\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\001\002\000\006\003\uff74\024\uff74\001" +
    "\002\000\012\003\uff72\024\uff72\040\173\041\175\001\002" +
    "\000\006\003\uff73\024\uff73\001\002\000\004\023\uff6b\001" +
    "\002\000\004\023\176\001\002\000\004\023\uff6a\001\002" +
    "\000\012\003\100\004\104\017\101\023\116\001\002\000" +
    "\006\003\uff71\024\uff71\001\002\000\006\003\uff70\024\uff70" +
    "\001\002\000\022\003\uff9b\012\uff9b\014\uff9b\015\uff9b\017" +
    "\uff9b\026\uff9b\027\uff9b\033\uff9b\001\002\000\006\003\204" +
    "\032\205\001\002\000\022\003\uff9a\012\uff9a\014\uff9a\015" +
    "\uff9a\017\uff9a\026\uff9a\027\uff9a\033\uff9a\001\002\000\016" +
    "\003\uff98\012\uff98\014\uff98\017\uff98\026\uff98\027\uff98\001" +
    "\002\000\016\003\210\012\053\014\047\017\060\026\056" +
    "\027\061\001\002\000\004\033\213\001\002\000\022\003" +
    "\uff99\012\uff99\014\uff99\015\uff99\017\uff99\026\uff99\027\uff99" +
    "\033\uff99\001\002\000\006\023\uff9e\033\uff95\001\002\000" +
    "\004\033\213\001\002\000\022\003\uff94\012\uff94\014\uff94" +
    "\015\uff94\017\uff94\026\uff94\027\uff94\033\uff94\001\002\000" +
    "\024\003\uff93\012\uff93\013\215\014\uff93\015\uff93\017\uff93" +
    "\026\uff93\027\uff93\033\uff93\001\002\000\022\003\uff92\012" +
    "\uff92\014\uff92\015\uff92\017\uff92\026\uff92\027\uff92\033\uff92" +
    "\001\002\000\006\003\216\032\217\001\002\000\016\003" +
    "\uff8f\012\uff8f\014\uff8f\017\uff8f\026\uff8f\027\uff8f\001\002" +
    "\000\016\003\223\012\053\014\047\017\060\026\056\027" +
    "\061\001\002\000\022\003\uff91\012\uff91\014\uff91\015\uff91" +
    "\017\uff91\026\uff91\027\uff91\033\uff91\001\002\000\022\003" +
    "\uff90\012\uff90\014\uff90\015\uff90\017\uff90\026\uff90\027\uff90" +
    "\033\uff90\001\002\000\004\033\226\001\002\000\006\023" +
    "\uff9e\033\uff8c\001\002\000\004\033\226\001\002\000\022" +
    "\003\uff8b\012\uff8b\014\uff8b\015\uff8b\017\uff8b\026\uff8b\027" +
    "\uff8b\033\uff8b\001\002\000\022\003\uff8a\012\uff8a\014\uff8a" +
    "\015\uff8a\017\uff8a\026\uff8a\027\uff8a\033\uff8a\001\002\000" +
    "\022\003\uff8d\012\uff8d\014\uff8d\015\uff8d\017\uff8d\026\uff8d" +
    "\027\uff8d\033\uff8d\001\002\000\016\003\223\012\053\014" +
    "\047\017\060\026\056\027\061\001\002\000\022\003\uff8e" +
    "\012\uff8e\014\uff8e\015\uff8e\017\uff8e\026\uff8e\027\uff8e\033" +
    "\uff8e\001\002\000\022\003\uff96\012\uff96\014\uff96\015\uff96" +
    "\017\uff96\026\uff96\027\uff96\033\uff96\001\002\000\016\003" +
    "\210\012\053\014\047\017\060\026\056\027\061\001\002" +
    "\000\022\003\uff97\012\uff97\014\uff97\015\uff97\017\uff97\026" +
    "\uff97\027\uff97\033\uff97\001\002\000\006\003\236\023\240" +
    "\001\002\000\006\003\uffbd\005\uffbd\001\002\000\022\003" +
    "\uffbf\012\uffbf\014\uffbf\015\uffbf\017\uffbf\026\uffbf\027\uffbf" +
    "\033\uffbf\001\002\000\006\003\241\005\243\001\002\000" +
    "\006\003\uffb9\024\uffb9\001\002\000\022\003\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\026\uffbe\027\uffbe\033\uffbe\001" +
    "\002\000\006\003\uffbb\024\uffbb\001\002\000\006\003\245" +
    "\024\247\001\002\000\006\003\uffb6\021\uffb6\001\002\000" +
    "\022\003\uffba\012\uffba\014\uffba\015\uffba\017\uffba\026\uffba" +
    "\027\uffba\033\uffba\001\002\000\006\003\252\021\251\001" +
    "\002\000\022\003\uffb7\012\uffb7\014\uffb7\015\uffb7\017\uffb7" +
    "\026\uffb7\027\uffb7\033\uffb7\001\002\000\022\003\uffb4\012" +
    "\uffb4\014\uffb4\015\uffb4\017\uffb4\026\uffb4\027\uffb4\033\uffb4" +
    "\001\002\000\004\021\uffb3\001\002\000\004\021\254\001" +
    "\002\000\022\003\uffb2\012\uffb2\014\uffb2\015\uffb2\017\uffb2" +
    "\026\uffb2\027\uffb2\033\uffb2\001\002\000\006\003\252\021" +
    "\251\001\002\000\022\003\uffb5\012\uffb5\014\uffb5\015\uffb5" +
    "\017\uffb5\026\uffb5\027\uffb5\033\uffb5\001\002\000\006\003" +
    "\245\024\247\001\002\000\022\003\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\017\uffb8\026\uffb8\027\uffb8\033\uffb8\001\002\000" +
    "\006\003\241\005\243\001\002\000\022\003\uffbc\012\uffbc" +
    "\014\uffbc\015\uffbc\017\uffbc\026\uffbc\027\uffbc\033\uffbc\001" +
    "\002\000\006\003\264\025\266\001\002\000\010\003\uff66" +
    "\004\uff66\017\uff66\001\002\000\022\003\uff68\012\uff68\014" +
    "\uff68\015\uff68\017\uff68\026\uff68\027\uff68\033\uff68\001\002" +
    "\000\010\003\271\004\273\017\272\001\002\000\022\003" +
    "\uff67\012\uff67\014\uff67\015\uff67\017\uff67\026\uff67\027\uff67" +
    "\033\uff67\001\002\000\006\003\277\021\276\001\002\000" +
    "\016\003\277\021\276\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\001\002\000\016\003\uff64\021\uff64\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\001\002\000\016\003\uff61\021\uff61\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\001\002\000\006\003\277\021" +
    "\276\001\002\000\022\003\uff60\012\uff60\014\uff60\015\uff60" +
    "\017\uff60\026\uff60\027\uff60\033\uff60\001\002\000\022\003" +
    "\uff5e\012\uff5e\014\uff5e\015\uff5e\017\uff5e\026\uff5e\027\uff5e" +
    "\033\uff5e\001\002\000\004\021\uff5d\001\002\000\004\021" +
    "\301\001\002\000\022\003\uff5c\012\uff5c\014\uff5c\015\uff5c" +
    "\017\uff5c\026\uff5c\027\uff5c\033\uff5c\001\002\000\006\003" +
    "\277\021\276\001\002\000\022\003\uff63\012\uff63\014\uff63" +
    "\015\uff63\017\uff63\026\uff63\027\uff63\033\uff63\001\002\000" +
    "\022\003\uff5f\012\uff5f\014\uff5f\015\uff5f\017\uff5f\026\uff5f" +
    "\027\uff5f\033\uff5f\001\002\000\022\003\uff62\012\uff62\014" +
    "\uff62\015\uff62\017\uff62\026\uff62\027\uff62\033\uff62\001\002" +
    "\000\010\003\271\004\273\017\272\001\002\000\022\003" +
    "\uff65\012\uff65\014\uff65\015\uff65\017\uff65\026\uff65\027\uff65" +
    "\033\uff65\001\002\000\006\003\311\033\312\001\002\000" +
    "\004\002\uffda\001\002\000\004\002\uffdb\001\002\000\004" +
    "\002\uffdc\001\002\000\006\003\315\023\316\001\002\000" +
    "\010\003\uffcf\004\uffcf\017\uffcf\001\002\000\010\003\321" +
    "\004\324\017\322\001\002\000\022\003\uffd1\012\uffd1\014" +
    "\uffd1\015\uffd1\017\uffd1\026\uffd1\027\uffd1\033\uffd1\001\002" +
    "\000\006\003\326\024\330\001\002\000\016\003\uffc8\024" +
    "\uffc8\034\uffa1\035\uffa1\036\uffa1\037\uffa1\001\002\000\016" +
    "\003\uffcc\024\uffcc\034\uffa2\035\uffa2\036\uffa2\037\uffa2\001" +
    "\002\000\022\003\uffd0\012\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\026\uffd0\027\uffd0\033\uffd0\001\002\000\016\003\uffca\024" +
    "\uffca\034\uffa3\035\uffa3\036\uffa3\037\uffa3\001\002\000\006" +
    "\003\326\024\330\001\002\000\006\003\uffc5\021\uffc5\001" +
    "\002\000\022\003\uffc9\012\uffc9\014\uffc9\015\uffc9\017\uffc9" +
    "\026\uffc9\027\uffc9\033\uffc9\001\002\000\006\003\332\021" +
    "\331\001\002\000\022\003\uffc3\012\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\026\uffc3\027\uffc3\033\uffc3\001\002\000\004\021" +
    "\uffc2\001\002\000\022\003\uffc6\012\uffc6\014\uffc6\015\uffc6" +
    "\017\uffc6\026\uffc6\027\uffc6\033\uffc6\001\002\000\004\021" +
    "\335\001\002\000\022\003\uffc1\012\uffc1\014\uffc1\015\uffc1" +
    "\017\uffc1\026\uffc1\027\uffc1\033\uffc1\001\002\000\006\003" +
    "\332\021\331\001\002\000\022\003\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\026\uffc4\027\uffc4\033\uffc4\001\002\000" +
    "\006\003\326\024\330\001\002\000\022\003\uffcb\012\uffcb" +
    "\014\uffcb\015\uffcb\017\uffcb\026\uffcb\027\uffcb\033\uffcb\001" +
    "\002\000\006\003\326\024\330\001\002\000\022\003\uffc7" +
    "\012\uffc7\014\uffc7\015\uffc7\017\uffc7\026\uffc7\027\uffc7\033" +
    "\uffc7\001\002\000\022\003\uffcd\012\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\026\uffcd\027\uffcd\033\uffcd\001\002\000\010\003" +
    "\321\004\324\017\322\001\002\000\022\003\uffce\012\uffce" +
    "\014\uffce\015\uffce\017\uffce\026\uffce\027\uffce\033\uffce\001" +
    "\002\000\004\002\uffdf\001\002\000\004\023\071\001\002" +
    "\000\022\003\uff9f\012\uff9f\014\uff9f\015\uff9f\017\uff9f\026" +
    "\uff9f\027\uff9f\033\uff9f\001\002\000\012\003\uff59\004\uff59" +
    "\017\uff59\023\uff59\001\002\000\022\003\uff5b\012\uff5b\014" +
    "\uff5b\015\uff5b\017\uff5b\026\uff5b\027\uff5b\033\uff5b\001\002" +
    "\000\012\003\100\004\104\017\101\023\076\001\002\000" +
    "\022\003\uff5a\012\uff5a\014\uff5a\015\uff5a\017\uff5a\026\uff5a" +
    "\027\uff5a\033\uff5a\001\002\000\006\003\360\024\361\001" +
    "\002\000\022\003\uff57\012\uff57\014\uff57\015\uff57\017\uff57" +
    "\026\uff57\027\uff57\033\uff57\001\002\000\006\003\uff55\032" +
    "\uff55\001\002\000\006\003\362\032\363\001\002\000\020" +
    "\003\uff52\012\uff52\014\uff52\015\uff52\017\uff52\026\uff52\027" +
    "\uff52\001\002\000\020\003\067\012\053\014\047\015\370" +
    "\017\060\026\056\027\061\001\002\000\022\003\uff56\012" +
    "\uff56\014\uff56\015\uff56\017\uff56\026\uff56\027\uff56\033\uff56" +
    "\001\002\000\004\033\376\001\002\000\022\003\uff53\012" +
    "\uff53\014\uff53\015\uff53\017\uff53\026\uff53\027\uff53\033\uff53" +
    "\001\002\000\006\015\373\033\uff4f\001\002\000\004\021" +
    "\371\001\002\000\020\003\067\012\053\014\047\017\060" +
    "\026\056\027\061\033\uff4d\001\002\000\004\033\uff4c\001" +
    "\002\000\004\021\374\001\002\000\004\033\uff4e\001\002" +
    "\000\022\003\uff50\012\uff50\014\uff50\015\uff50\017\uff50\026" +
    "\uff50\027\uff50\033\uff50\001\002\000\022\003\uff4b\012\uff4b" +
    "\014\uff4b\015\uff4b\017\uff4b\026\uff4b\027\uff4b\033\uff4b\001" +
    "\002\000\020\003\067\012\053\014\047\015\370\017\060" +
    "\026\056\027\061\001\002\000\022\003\uff51\012\uff51\014" +
    "\uff51\015\uff51\017\uff51\026\uff51\027\uff51\033\uff51\001\002" +
    "\000\006\003\362\032\363\001\002\000\022\003\uff54\012" +
    "\uff54\014\uff54\015\uff54\017\uff54\026\uff54\027\uff54\033\uff54" +
    "\001\002\000\012\003\100\004\104\017\101\023\076\001" +
    "\002\000\022\003\uff58\012\uff58\014\uff58\015\uff58\017\uff58" +
    "\026\uff58\027\uff58\033\uff58\001\002\000\020\003\057\012" +
    "\053\014\047\017\060\026\056\027\061\033\063\001\002" +
    "\000\004\002\uffe0\001\002\000\006\003\044\032\046\001" +
    "\002\000\004\002\uffe3\001\002\000\006\003\041\024\043" +
    "\001\002\000\004\002\uffe6\001\002\000\006\003\037\023" +
    "\040\001\002\000\004\002\ufffc\001\002\000\004\002\000" +
    "\001\002\000\006\003\ufffb\030\ufffb\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\012\002\003\005\005\015\011\021\004\001" +
    "\001\000\002\001\001\000\006\005\u010d\021\004\001\001" +
    "\000\004\015\u010c\001\001\000\004\124\u010a\001\001\000" +
    "\004\003\035\001\001\000\004\125\012\001\001\000\002" +
    "\001\001\000\004\022\013\001\001\000\002\001\001\000" +
    "\004\127\033\001\001\000\004\126\016\001\001\000\006" +
    "\017\021\023\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\130\031\001\001\000\004" +
    "\020\024\001\001\000\002\001\001\000\004\131\026\001" +
    "\001\000\004\030\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\032\001\001\000\002\001\001\000" +
    "\006\017\021\023\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\132\u0108\001\001\000\004\011\041\001" +
    "\001\000\004\133\u0106\001\001\000\002\001\001\000\004" +
    "\013\044\001\001\000\004\134\u0104\001\001\000\002\001" +
    "\001\000\022\014\063\031\054\032\047\033\061\034\050" +
    "\035\053\036\051\037\064\001\001\000\004\115\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\157\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\136\313\001\001\000\006\135\307\160\067" +
    "\001\001\000\004\171\262\001\001\000\004\145\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\031\065\032\047\033\061\034\050\035\053\036" +
    "\051\037\064\001\001\000\002\001\001\000\004\160\067" +
    "\001\001\000\004\057\071\001\001\000\016\060\102\065" +
    "\073\101\074\102\076\104\072\111\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\200\001\001\000" +
    "\002\001\001\000\026\050\125\051\130\052\123\053\124" +
    "\054\121\055\122\075\165\102\076\104\072\111\163\001" +
    "\001\000\006\074\110\107\161\001\001\000\004\167\157" +
    "\001\001\000\004\166\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\165\104\001\001\000\006\074\110" +
    "\107\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\102\120\110\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\050\125\051\130\052\123\053\124\054\121" +
    "\055\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\170\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\153\153\001\001\000\004\155\151\001\001\000\004\156" +
    "\147\001\001\000\004\154\143\001\001\000\020\050\146" +
    "\051\130\052\123\053\124\054\121\055\144\056\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\050\146\051\130\052\123\053\124\054\121\055" +
    "\144\056\150\001\001\000\002\001\001\000\020\050\146" +
    "\051\130\052\123\053\124\054\121\055\144\056\152\001" +
    "\001\000\002\001\001\000\020\050\146\051\130\052\123" +
    "\053\124\054\121\055\144\056\154\001\001\000\002\001" +
    "\001\000\006\074\110\107\156\001\001\000\002\001\001" +
    "\000\006\074\110\107\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\167\157\001\001\000\004\112\167" +
    "\001\001\000\004\166\155\001\001\000\002\001\001\000" +
    "\004\165\104\001\001\000\002\001\001\000\006\076\171" +
    "\100\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\101\177\113\176\001\001\000\002\001\001\000\012" +
    "\075\165\102\076\104\072\111\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\202" +
    "\001\001\000\002\001\001\000\004\161\232\001\001\000" +
    "\022\031\205\032\047\033\061\034\050\035\053\036\051" +
    "\037\064\063\206\001\001\000\004\106\231\001\001\000" +
    "\002\001\001\000\006\160\067\162\210\001\001\000\004" +
    "\106\211\001\001\000\002\001\001\000\004\064\213\001" +
    "\001\000\002\001\001\000\004\066\217\001\001\000\004" +
    "\163\227\001\001\000\022\031\221\032\047\033\061\034" +
    "\050\035\053\036\051\037\064\067\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\226\001\001\000" +
    "\006\160\067\164\223\001\001\000\004\070\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\031\221\032\047\033\061\034\050\035\053\036\051" +
    "\037\064\067\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\031\205\032\047\033\061\034\050\035\053" +
    "\036\051\037\064\063\233\001\001\000\002\001\001\000" +
    "\004\040\236\001\001\000\004\146\260\001\001\000\002" +
    "\001\001\000\004\041\241\001\001\000\004\150\256\001" +
    "\001\000\002\001\001\000\004\147\243\001\001\000\004" +
    "\042\245\001\001\000\004\151\254\001\001\000\002\001" +
    "\001\000\004\043\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\152\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\255\001\001\000\002\001\001" +
    "\000\004\042\257\001\001\000\002\001\001\000\004\041" +
    "\261\001\001\000\002\001\001\000\004\071\264\001\001" +
    "\000\004\172\305\001\001\000\002\001\001\000\020\050" +
    "\267\051\130\052\123\053\124\054\121\055\122\072\266" +
    "\001\001\000\002\001\001\000\004\073\304\001\001\000" +
    "\004\073\303\001\001\000\004\173\301\001\001\000\004" +
    "\174\273\001\001\000\004\073\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\175\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\050\267\051\130\052\123\053\124\054\121\055\122\072" +
    "\306\001\001\000\002\001\001\000\004\012\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\316\001\001\000\004\137\344\001\001\000\020" +
    "\045\322\050\317\051\130\052\123\053\124\054\121\055" +
    "\122\001\001\000\002\001\001\000\004\046\343\001\001" +
    "\000\004\142\341\001\001\000\004\140\337\001\001\000" +
    "\002\001\001\000\004\141\324\001\001\000\004\046\326" +
    "\001\001\000\004\143\335\001\001\000\002\001\001\000" +
    "\004\047\332\001\001\000\002\001\001\000\004\144\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\336\001\001\000\002\001\001\000\004" +
    "\046\340\001\001\000\002\001\001\000\004\046\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\045\345" +
    "\050\317\051\130\052\123\053\124\054\121\055\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\350" +
    "\001\001\000\002\001\001\000\004\176\u0102\001\001\000" +
    "\002\001\001\000\016\065\355\101\074\102\076\104\072" +
    "\111\101\116\354\001\001\000\002\001\001\000\004\117" +
    "\356\001\001\000\002\001\001\000\004\177\u0100\001\001" +
    "\000\004\120\363\001\001\000\004\200\376\001\001\000" +
    "\024\031\366\032\047\033\061\034\050\035\053\036\051" +
    "\037\064\121\365\123\364\001\001\000\002\001\001\000" +
    "\004\122\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\371\032\047\033\061\034" +
    "\050\035\053\036\051\037\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\031\366\032\047\033\061\034\050" +
    "\035\053\036\051\037\064\121\377\123\364\001\001\000" +
    "\002\001\001\000\004\120\u0101\001\001\000\002\001\001" +
    "\000\016\065\355\101\074\102\076\104\072\111\101\116" +
    "\u0103\001\001\000\002\001\001\000\022\014\u0105\031\054" +
    "\032\047\033\061\034\050\035\053\036\051\037\064\001" +
    "\001\000\002\001\001\000\004\013\u0107\001\001\000\002" +
    "\001\001\000\004\011\u0109\001\001\000\002\001\001\000" +
    "\004\003\u010b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public  ArrayList<String> expectedTokens_msg = new ArrayList<String>();
    public  ArrayList<String> errorsLines = new ArrayList<String>();
    public  ArrayList<String> errors = new ArrayList<String>();
    public  ArrayList<String> getExpectedTokens() {
        return expectedTokens_msg;
    }

    public ArrayList<String> getLineErrors() {
        return errorsLines;
    }
    public ArrayList<String> getErrors() {
        return errors;
    }

    protected void report_expected_token_ids() {

        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected : ids) {
            if (!(symbl_name_from_id(expected).equals("EOF") || symbl_name_from_id(expected).equals("error")))
                list.add(symbl_name_from_id(expected));
          }
        String msg = "expected tokens are "+ list;
        expectedTokens_msg.add(msg);
        System.err.println(msg);  
    }
    
    public void syntax_error(Symbol s){
        String msg = "Syntax error: "+" Line: " + s.left +" Column: " +s.right;
        String symbolName = symbl_name_from_id(s.sym);
        msg += "\nCurrent: " + symbolName + "\n";

        errorsLines.add(msg);
        System.err.print(msg);
      
        report_expected_token_ids();
    }
    
    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{   
        
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    public void printError(String pMsg){
        System.err.println(pMsg+"\n");
        errors.add(pMsg+"\n");        
    }

    public void report_fatal_error(String message, Object info) {

        //report_error(message, info);
        //System.exit(1);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= variables_list lmain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= lmain 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lmain ::= MAIN main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
 printError("Missing main token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lmain ::= error NT$0 main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables_list ::= variables_elem variables_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables_list ::= variables_elem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                                    Symbol symbolT= new Symbol(0,tleft,tright,t);
                                    SR_Type type= new SR_Type (symbolT);
                                    type.setType(sym.TYPE_NUM);
                                    SemanticStack.getInstance().push(type);
                              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables_elem ::= TYPE_NUM NT$1 variables_elem_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.IDENTIFIER,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_elem_one ::= IDENTIFIER NT$2 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
 printError("Missing Type token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables_elem_one ::= error NT$3 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables_elem_two ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalUn();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables_elem_two ::= assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_elem_two ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // end_decl ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // end_decl ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assign ::= ASSIGN assign_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
 printError("Missing = token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign ::= error NT$4 assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign_one ::= LITERAL_NUM NT$5 assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_one",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign_two ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalIn();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_two",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // main ::= LPAR mainn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // main ::= error NT$6 mainn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mainn ::= RPAR mainnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainn ::= error NT$7 mainnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainnn ::= BEGIN mainnnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mainnn ::= error NT$8 mainnnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainnnn ::= content END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainnnn ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mainnnn ::= error NT$9 fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fin ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fin ::= error 
            {
              Object RESULT =null;
		 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // content ::= structures content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // content ::= structures 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structures ::= if_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structures ::= putw_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // structures ::= puts_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // structures ::= while_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // structures ::= declar_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                           Symbol symbol= new Symbol(sym.PUTS,pleft,pright,p);
                           SR_PUTW register= new SR_PUTW(symbol);
                           SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // putw_struct ::= PUTW NT$10 putw_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // putw_struct_one ::= LPAR putw_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // putw_struct_one ::= error NT$11 putw_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // putw_struct_two ::= arithmetic putw_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // putw_struct_two ::= IDENTIFIER NT$12 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // putw_struct_two ::= LITERAL_NUM NT$13 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$14 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // putw_struct_two ::= error NT$14 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // putw_struct_three ::= RPAR putw_struct_fourth 
            {
              Object RESULT =null;
		 RWEvaluator.getInstance().evalPutw(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$15 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // putw_struct_three ::= error NT$15 putw_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // putw_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // putw_struct_fourth ::= error NT$16 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$17 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                           Symbol symbol= new Symbol(sym.PUTS,pleft,pright,p);
                           SR_PUTS register= new SR_PUTS(symbol);
                           SemanticStack.getInstance().push(register);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // puts_struct ::= PUTS NT$17 puts_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // puts_struct_one ::= LPAR puts_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$18 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // puts_struct_one ::= error NT$18 puts_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                                            Symbol symbol= new Symbol(0,sleft,sright,s);
                                            SR_DO sr_do = new SR_DO(symbol,"char");
                                            SemanticStack.getInstance().push(sr_do);
                                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // puts_struct_two ::= LITERAL_CONSTANT NT$19 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$20 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // puts_struct_two ::= error NT$20 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // puts_struct_three ::= RPAR puts_struct_fourth 
            {
              Object RESULT =null;
		 RWEvaluator.getInstance().evalPuts(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$21 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$21",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // puts_struct_three ::= error NT$21 puts_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // puts_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$22 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$22",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // puts_struct_fourth ::= error NT$22 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arithmetic ::= add 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arithmetic ::= subs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arithmetic ::= mult 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arithmetic ::= div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$23 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$23",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // mult ::= params MULT NT$23 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mult",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$24 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$24",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // div ::= params DIV NT$24 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("div",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$25 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$25",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // add ::= params PLUS NT$25 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("add",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$26 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$26",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // subs ::= params MINUS NT$26 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subs",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // _aux ::= arithmetic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // _aux ::= params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // params ::= LITERAL_NUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // params ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // params ::= error 
            {
              Object RESULT =null;
		 printError("Missing parameter token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$27 ::= 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbol = new Symbol(0,iffleft,iffright,iff);
                 SR_If register = new SR_If(symbol);
                 SemanticStack.getInstance().push(register);
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$27",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_struct ::= IF NT$27 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$28 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$28",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_struct ::= error NT$28 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_struct_one ::= LPAR if_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_one",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_struct_two ::= condition if_struct_three 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_two",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_struct_three ::= RPAR if_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_three",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_struct_four ::= BEGIN if_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$29 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$29",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_struct_four ::= error NT$29 if_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_struct_five ::= content if_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$30 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$30",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_struct_five ::= error NT$30 if_struct_six 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_struct_six ::= END else_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // else_struct ::= ELSE else_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // else_struct_one ::= BEGIN else_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$31 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$31",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_struct_one ::= error NT$31 else_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // else_struct_two ::= content else_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$32 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$32",114, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_struct_two ::= error NT$32 else_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // else_struct_three ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_three",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condition ::= condition_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condition ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condition_aux ::= condition_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condition_aux ::= error 
            {
              Object RESULT =null;
		 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$33 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$33",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condition_one ::= LITERAL_NUM NT$33 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$34 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$34",116, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condition_one ::= IDENTIFIER NT$34 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condition_one ::= arithmetic_aux condition_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$35 ::= 
            {
              Object RESULT =null;
 printError("Missing literal_num or Idendifier or arithmetic expression token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$35",117, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condition_one ::= error NT$35 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condition_two ::= comparison condition_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_two",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condition_three ::= LITERAL_NUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // condition_three ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condition_three ::= arithmetic_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // condition_three ::= error 
            {
              Object RESULT =null;
		 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithmetic_aux ::= LPAR arithmetic arithmetic_aux_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithmetic_aux_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$36 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$36",118, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithmetic_aux_one ::= error NT$36 RPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // exp ::= LPAR expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= condition_aux expr_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_one ::= RPAR expr_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_two ::= logic_comparison expr_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_two",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_three ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_three",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // comparison ::= LOWER 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // comparison ::= HIGHER 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // comparison ::= EQUALS 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // comparison ::= DIFFERENT 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logic_comparison ::= AND 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logic_comparison ::= OR 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$37 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.IDENTIFIER,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$37",119, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declar_assign ::= IDENTIFIER NT$37 declar_assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declar_assign_one ::= ASSIGN declar_assign_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$38 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$38",120, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declar_assign_one ::= error NT$38 declar_assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$39 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$39",121, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declar_assign_two ::= IDENTIFIER NT$39 declar_assign_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declar_assign_two ::= arithmetic declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$40 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.LITERAL_NUM,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$40",122, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // declar_assign_two ::= LITERAL_NUM NT$40 declar_assign_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declar_assign_two ::= error declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declar_assign_three ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalAssign();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$41 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$41",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declar_assign_three ::= error NT$41 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // while_struct ::= WHILE while_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // while_struct_one ::= LPAR while_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$42 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$42",124, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // while_struct_one ::= error NT$42 while_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // while_struct_two ::= condition while_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_two",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // while_struct_three ::= RPAR while_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$43 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$43",125, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // while_struct_three ::= error NT$43 while_struct_four 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // while_struct_four ::= BEGIN while_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$44 ::= 
            {
              Object RESULT =null;
 printError("Missing { token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$44",126, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // while_struct_four ::= error NT$44 while_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // while_struct_five ::= while_struct_aux while_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_five",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // while_struct_aux ::= content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // while_struct_aux ::= content BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // while_struct_aux ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // while_struct_aux ::= BREAK SEMICOLON content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // while_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_six",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
