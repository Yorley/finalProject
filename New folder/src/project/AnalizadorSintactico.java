
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package project;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import project.semantic.evaluators.*;
import project.semantic.SemanticStack;
import project.semantic.SymbolTable.SymbolTable;
import project.semantic.registers.*;
import project.semantic.Writer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\333\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\015\004\000\002\146\002\000\002\015\005" +
    "\000\002\005\004\000\002\005\003\000\002\147\002\000" +
    "\002\021\005\000\002\150\002\000\002\022\005\000\002" +
    "\151\002\000\002\022\005\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\025\003\000\002\025\003" +
    "\000\002\017\004\000\002\152\002\000\002\017\005\000" +
    "\002\153\002\000\002\020\005\000\002\030\003\000\002" +
    "\003\004\000\002\154\002\000\002\003\005\000\002\011" +
    "\004\000\002\155\002\000\002\011\005\000\002\013\004" +
    "\000\002\156\002\000\002\013\005\000\002\014\004\000" +
    "\002\014\003\000\002\157\002\000\002\014\005\000\002" +
    "\012\003\000\002\012\003\000\002\031\004\000\002\031" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\160\002\000\002\035\005\000\002\044\004\000\002" +
    "\161\002\000\002\044\005\000\002\045\004\000\002\162" +
    "\002\000\002\045\005\000\002\163\002\000\002\045\005" +
    "\000\002\164\002\000\002\045\005\000\002\046\004\000" +
    "\002\165\002\000\002\046\005\000\002\047\003\000\002" +
    "\166\002\000\002\047\005\000\002\167\002\000\002\036" +
    "\005\000\002\040\004\000\002\170\002\000\002\040\005" +
    "\000\002\171\002\000\002\041\005\000\002\172\002\000" +
    "\002\041\005\000\002\042\004\000\002\173\002\000\002" +
    "\042\005\000\002\043\003\000\002\174\002\000\002\043" +
    "\005\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\175\002\000\002\053\006\000" +
    "\002\176\002\000\002\054\006\000\002\177\002\000\002" +
    "\051\006\000\002\200\002\000\002\052\006\000\002\056" +
    "\003\000\002\056\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\201\002\000\002\032\005\000" +
    "\002\202\002\000\002\032\005\000\002\057\004\000\002" +
    "\060\004\000\002\061\004\000\002\062\004\000\002\203" +
    "\002\000\002\062\005\000\002\063\004\000\002\204\002" +
    "\000\002\063\005\000\002\106\003\000\002\106\004\000" +
    "\002\064\004\000\002\066\004\000\002\205\002\000\002" +
    "\066\005\000\002\067\004\000\002\206\002\000\002\067" +
    "\005\000\002\070\003\000\002\065\003\000\002\065\003" +
    "\000\002\111\003\000\002\111\003\000\002\207\002\000" +
    "\002\104\005\000\002\210\002\000\002\104\005\000\002" +
    "\104\004\000\002\211\002\000\002\104\005\000\002\107" +
    "\004\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\102\005\000\002\105\003\000" +
    "\002\212\002\000\002\105\005\000\002\101\004\000\002" +
    "\075\004\000\002\112\004\000\002\112\003\000\002\076" +
    "\004\000\002\113\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\100\003\000" +
    "\002\100\003\000\002\213\002\000\002\034\005\000\002" +
    "\071\004\000\002\214\002\000\002\071\005\000\002\215" +
    "\002\000\002\072\005\000\002\072\004\000\002\216\002" +
    "\000\002\072\005\000\002\072\004\000\002\073\003\000" +
    "\002\217\002\000\002\073\005\000\002\033\004\000\002" +
    "\115\004\000\002\220\002\000\002\115\005\000\002\116" +
    "\004\000\002\117\004\000\002\221\002\000\002\117\005" +
    "\000\002\120\004\000\002\222\002\000\002\120\005\000" +
    "\002\121\004\000\002\123\003\000\002\123\005\000\002" +
    "\123\004\000\002\123\005\000\002\122\003\000\002\125" +
    "\004\000\002\126\004\000\002\223\002\000\002\126\005" +
    "\000\002\127\004\000\002\127\005\000\002\224\002\000" +
    "\002\127\006\000\002\130\004\000\002\225\002\000\002" +
    "\130\005\000\002\131\004\000\002\131\003\000\002\132" +
    "\004\000\002\136\004\000\002\226\002\000\002\136\005" +
    "\000\002\136\004\000\002\124\004\000\002\124\004\000" +
    "\002\227\002\000\002\124\005\000\002\135\003\000\002" +
    "\133\004\000\002\230\002\000\002\133\007\000\002\134" +
    "\003\000\002\140\004\000\002\141\004\000\002\231\002" +
    "\000\002\142\006\000\002\143\005\000\002\144\004\000" +
    "\002\145\004\000\002\137\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\010\003\007\007\011\030\010\001\002\000" +
    "\004\002\u013d\001\002\000\010\003\ufffa\007\011\030\ufffa" +
    "\001\002\000\006\003\007\030\010\001\002\000\006\003" +
    "\ufffd\023\ufffd\001\002\000\006\003\037\023\040\001\002" +
    "\000\006\003\ufff9\017\ufff9\001\002\000\004\002\uffff\001" +
    "\002\000\006\003\015\017\016\001\002\000\010\003\ufff8" +
    "\007\ufff8\030\ufff8\001\002\000\010\003\ufff5\021\ufff5\025" +
    "\ufff5\001\002\000\010\003\ufff7\021\ufff7\025\ufff7\001\002" +
    "\000\010\003\023\021\021\025\024\001\002\000\010\003" +
    "\ufff6\007\ufff6\030\ufff6\001\002\000\010\003\ufff3\007\ufff3" +
    "\030\ufff3\001\002\000\010\003\ufff2\007\ufff2\030\ufff2\001" +
    "\002\000\012\003\ufff1\004\uffed\007\ufff1\030\ufff1\001\002" +
    "\000\004\004\026\001\002\000\010\003\uffee\007\uffee\030" +
    "\uffee\001\002\000\004\021\uffeb\001\002\000\004\021\030" +
    "\001\002\000\010\003\uffe9\007\uffe9\030\uffe9\001\002\000" +
    "\010\003\uffea\007\uffea\030\uffea\001\002\000\004\004\026" +
    "\001\002\000\010\003\uffec\007\uffec\030\uffec\001\002\000" +
    "\010\003\023\021\021\025\024\001\002\000\010\003\ufff4" +
    "\007\ufff4\030\ufff4\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\uffe7\024\uffe7\001\002\000\006\003\041\024\043" +
    "\001\002\000\006\003\uffe4\032\uffe4\001\002\000\004\002" +
    "\uffe8\001\002\000\006\003\044\032\046\001\002\000\022" +
    "\003\uffe1\007\uffe1\012\uffe1\014\uffe1\017\uffe1\026\uffe1\027" +
    "\uffe1\033\uffe1\001\002\000\004\002\uffe5\001\002\000\022" +
    "\003\065\007\061\012\055\014\051\017\054\026\063\027" +
    "\067\033\053\001\002\000\026\003\uffd5\007\uffd5\012\uffd5" +
    "\014\uffd5\015\uffd5\017\uffd5\026\uffd5\027\uffd5\033\uffd5\046" +
    "\uffd5\001\002\000\026\003\uffd3\007\uffd3\012\uffd3\014\uffd3" +
    "\015\uffd3\017\uffd3\026\uffd3\027\uffd3\033\uffd3\046\uffd3\001" +
    "\002\000\006\003\u0118\023\u0119\001\002\000\006\003\362" +
    "\023\363\001\002\000\004\002\uffde\001\002\000\006\003" +
    "\uff68\025\uff68\001\002\000\004\023\uff9f\001\002\000\004" +
    "\002\uffe2\001\002\000\026\003\uffd7\007\uffd7\012\uffd7\014" +
    "\uffd7\015\uffd7\017\uffd7\026\uffd7\027\uffd7\033\uffd7\046\uffd7" +
    "\001\002\000\026\003\uffd2\007\uffd2\012\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\026\uffd2\027\uffd2\033\uffd2\046\uffd2\001\002" +
    "\000\006\003\332\017\076\001\002\000\026\003\uffd6\007" +
    "\uffd6\012\uffd6\014\uffd6\015\uffd6\017\uffd6\026\uffd6\027\uffd6" +
    "\033\uffd6\046\uffd6\001\002\000\006\003\uffd1\023\uffd1\001" +
    "\002\000\026\003\uffd4\007\uffd4\012\uffd4\014\uffd4\015\uffd4" +
    "\017\uffd4\026\uffd4\027\uffd4\033\uffd4\046\uffd4\001\002\000" +
    "\012\003\uffdd\017\uff35\023\uff9d\033\uffdd\001\002\000\004" +
    "\033\271\001\002\000\006\003\uffbf\023\uffbf\001\002\000" +
    "\026\003\072\007\061\012\055\014\051\015\uffd8\017\054" +
    "\026\063\027\067\033\uffd8\046\uffd8\001\002\000\010\015" +
    "\uffd9\033\uffd9\046\uffd9\001\002\000\006\017\uff35\023\uff9d" +
    "\001\002\000\004\023\077\001\002\000\004\017\076\001" +
    "\002\000\006\003\uff34\023\uff34\001\002\000\006\003\uff33" +
    "\023\uff33\001\002\000\012\003\106\004\112\017\110\023" +
    "\104\001\002\000\026\003\uff9c\007\uff9c\012\uff9c\014\uff9c" +
    "\015\uff9c\017\uff9c\026\uff9c\027\uff9c\033\uff9c\046\uff9c\001" +
    "\002\000\006\003\uff86\024\uff86\001\002\000\004\024\210" +
    "\001\002\000\006\003\uff87\024\uff87\001\002\000\012\003" +
    "\171\004\175\017\172\023\124\001\002\000\012\042\121" +
    "\043\115\044\114\045\116\001\002\000\016\003\uff85\024" +
    "\uff85\042\uff7f\043\uff7f\044\uff7f\045\uff7f\001\002\000\006" +
    "\003\uff88\024\uff88\001\002\000\012\042\uff82\043\uff82\044" +
    "\uff82\045\uff82\001\002\000\026\003\uff9b\007\uff9b\012\uff9b" +
    "\014\uff9b\015\uff9b\017\uff9b\026\uff9b\027\uff9b\033\uff9b\046" +
    "\uff9b\001\002\000\012\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\001\002\000\012\042\121\043\115\044\114\045\116\001" +
    "\002\000\012\003\uff6c\004\uff6c\017\uff6c\023\uff6c\001\002" +
    "\000\012\003\uff6e\004\uff6e\017\uff6e\023\uff6e\001\002\000" +
    "\012\003\uff6b\004\uff6b\017\uff6b\023\uff6b\001\002\000\012" +
    "\003\123\004\125\017\126\023\124\001\002\000\006\003" +
    "\uff83\024\uff83\001\002\000\012\003\uff6d\004\uff6d\017\uff6d" +
    "\023\uff6d\001\002\000\006\003\uff7d\024\uff7d\001\002\000" +
    "\006\003\uff79\024\uff79\001\002\000\010\003\135\004\140" +
    "\017\136\001\002\000\006\003\uff7c\024\uff7c\001\002\000" +
    "\006\003\uff7b\024\uff7b\001\002\000\006\003\uff7a\024\uff7a" +
    "\001\002\000\010\003\uffad\021\uffad\024\uffad\001\002\000" +
    "\012\034\147\035\150\036\146\037\151\001\002\000\010" +
    "\003\uffaf\021\uffaf\024\uffaf\001\002\000\010\003\uffae\021" +
    "\uffae\024\uffae\001\002\000\006\003\142\024\143\001\002" +
    "\000\020\003\uffa0\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\001\002\000\020\003\uffa1\021\uffa1\024\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\001\002\000\010\003" +
    "\uffb0\021\uffb0\024\uffb0\001\002\000\020\003\uffa2\021\uffa2" +
    "\024\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\001\002\000" +
    "\016\003\uff78\024\uff78\042\uff78\043\uff78\044\uff78\045\uff78" +
    "\001\002\000\004\024\uff76\001\002\000\016\003\uff77\024" +
    "\uff77\042\uff77\043\uff77\044\uff77\045\uff77\001\002\000\004" +
    "\024\145\001\002\000\016\003\uff75\024\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\001\002\000\010\003\uffac\004\uffac" +
    "\017\uffac\001\002\000\010\003\uffa8\004\uffa8\017\uffa8\001" +
    "\002\000\010\003\uffa6\004\uffa6\017\uffa6\001\002\000\010" +
    "\003\uffaa\004\uffaa\017\uffaa\001\002\000\010\003\135\004" +
    "\140\017\136\001\002\000\020\003\uffa3\021\uffa3\024\uffa3" +
    "\034\147\035\150\036\146\037\151\001\002\000\010\003" +
    "\uffa9\021\uffa9\024\uffa9\001\002\000\010\003\uffa4\021\uffa4" +
    "\024\uffa4\001\002\000\010\003\135\004\140\017\136\001" +
    "\002\000\010\003\uffa5\021\uffa5\024\uffa5\001\002\000\010" +
    "\003\135\004\140\017\136\001\002\000\010\003\uffa7\021" +
    "\uffa7\024\uffa7\001\002\000\010\003\135\004\140\017\136" +
    "\001\002\000\010\003\uffab\021\uffab\024\uffab\001\002\000" +
    "\012\042\121\043\115\044\114\045\116\001\002\000\006" +
    "\003\uff81\024\uff81\001\002\000\012\042\121\043\115\044" +
    "\114\045\116\001\002\000\006\003\uff7e\024\uff7e\001\002" +
    "\000\006\003\uff80\024\uff80\001\002\000\024\024\uff85\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\001\002\000\022\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\042\uff82\043\uff82\044\uff82\045\uff82\001\002\000\004" +
    "\024\177\001\002\000\006\003\uff74\024\uff74\001\002\000" +
    "\022\034\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\001\002\000\006\003\uff73\024\uff73\001" +
    "\002\000\012\003\uff71\024\uff71\040\201\041\203\001\002" +
    "\000\006\003\uff72\024\uff72\001\002\000\004\023\uff6a\001" +
    "\002\000\004\023\204\001\002\000\004\023\uff69\001\002" +
    "\000\012\003\106\004\112\017\110\023\124\001\002\000" +
    "\006\003\uff70\024\uff70\001\002\000\006\003\uff6f\024\uff6f" +
    "\001\002\000\026\003\uff9a\007\uff9a\012\uff9a\014\uff9a\015" +
    "\uff9a\017\uff9a\026\uff9a\027\uff9a\033\uff9a\046\uff9a\001\002" +
    "\000\006\003\212\032\213\001\002\000\026\003\uff99\007" +
    "\uff99\012\uff99\014\uff99\015\uff99\017\uff99\026\uff99\027\uff99" +
    "\033\uff99\046\uff99\001\002\000\020\003\uff97\007\uff97\012" +
    "\uff97\014\uff97\017\uff97\026\uff97\027\uff97\001\002\000\020" +
    "\003\216\007\061\012\055\014\051\017\054\026\063\027" +
    "\067\001\002\000\004\033\221\001\002\000\026\003\uff98" +
    "\007\uff98\012\uff98\014\uff98\015\uff98\017\uff98\026\uff98\027" +
    "\uff98\033\uff98\046\uff98\001\002\000\010\017\uff35\023\uff9d" +
    "\033\uff94\001\002\000\004\033\221\001\002\000\026\003" +
    "\uff93\007\uff93\012\uff93\014\uff93\015\uff93\017\uff93\026\uff93" +
    "\027\uff93\033\uff93\046\uff93\001\002\000\030\003\uff92\007" +
    "\uff92\012\uff92\013\223\014\uff92\015\uff92\017\uff92\026\uff92" +
    "\027\uff92\033\uff92\046\uff92\001\002\000\026\003\uff91\007" +
    "\uff91\012\uff91\014\uff91\015\uff91\017\uff91\026\uff91\027\uff91" +
    "\033\uff91\046\uff91\001\002\000\006\003\224\032\225\001" +
    "\002\000\020\003\uff8e\007\uff8e\012\uff8e\014\uff8e\017\uff8e" +
    "\026\uff8e\027\uff8e\001\002\000\020\003\231\007\061\012" +
    "\055\014\051\017\054\026\063\027\067\001\002\000\026" +
    "\003\uff90\007\uff90\012\uff90\014\uff90\015\uff90\017\uff90\026" +
    "\uff90\027\uff90\033\uff90\046\uff90\001\002\000\026\003\uff8f" +
    "\007\uff8f\012\uff8f\014\uff8f\015\uff8f\017\uff8f\026\uff8f\027" +
    "\uff8f\033\uff8f\046\uff8f\001\002\000\004\033\234\001\002" +
    "\000\010\017\uff35\023\uff9d\033\uff8b\001\002\000\004\033" +
    "\234\001\002\000\026\003\uff8a\007\uff8a\012\uff8a\014\uff8a" +
    "\015\uff8a\017\uff8a\026\uff8a\027\uff8a\033\uff8a\046\uff8a\001" +
    "\002\000\026\003\uff89\007\uff89\012\uff89\014\uff89\015\uff89" +
    "\017\uff89\026\uff89\027\uff89\033\uff89\046\uff89\001\002\000" +
    "\026\003\uff8c\007\uff8c\012\uff8c\014\uff8c\015\uff8c\017\uff8c" +
    "\026\uff8c\027\uff8c\033\uff8c\046\uff8c\001\002\000\020\003" +
    "\231\007\061\012\055\014\051\017\054\026\063\027\067" +
    "\001\002\000\026\003\uff8d\007\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\017\uff8d\026\uff8d\027\uff8d\033\uff8d\046\uff8d\001\002" +
    "\000\026\003\uff95\007\uff95\012\uff95\014\uff95\015\uff95\017" +
    "\uff95\026\uff95\027\uff95\033\uff95\046\uff95\001\002\000\020" +
    "\003\216\007\061\012\055\014\051\017\054\026\063\027" +
    "\067\001\002\000\026\003\uff96\007\uff96\012\uff96\014\uff96" +
    "\015\uff96\017\uff96\026\uff96\027\uff96\033\uff96\046\uff96\001" +
    "\002\000\006\003\244\023\246\001\002\000\006\003\uffbc" +
    "\005\uffbc\001\002\000\026\003\uffbe\007\uffbe\012\uffbe\014" +
    "\uffbe\015\uffbe\017\uffbe\026\uffbe\027\uffbe\033\uffbe\046\uffbe" +
    "\001\002\000\006\003\247\005\251\001\002\000\006\003" +
    "\uffb8\024\uffb8\001\002\000\026\003\uffbd\007\uffbd\012\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\026\uffbd\027\uffbd\033\uffbd\046" +
    "\uffbd\001\002\000\006\003\uffba\024\uffba\001\002\000\006" +
    "\003\253\024\255\001\002\000\006\003\uffb5\021\uffb5\001" +
    "\002\000\026\003\uffb9\007\uffb9\012\uffb9\014\uffb9\015\uffb9" +
    "\017\uffb9\026\uffb9\027\uffb9\033\uffb9\046\uffb9\001\002\000" +
    "\006\003\260\021\257\001\002\000\026\003\uffb6\007\uffb6" +
    "\012\uffb6\014\uffb6\015\uffb6\017\uffb6\026\uffb6\027\uffb6\033" +
    "\uffb6\046\uffb6\001\002\000\026\003\uffb3\007\uffb3\012\uffb3" +
    "\014\uffb3\015\uffb3\017\uffb3\026\uffb3\027\uffb3\033\uffb3\046" +
    "\uffb3\001\002\000\004\021\uffb2\001\002\000\004\021\262" +
    "\001\002\000\026\003\uffb1\007\uffb1\012\uffb1\014\uffb1\015" +
    "\uffb1\017\uffb1\026\uffb1\027\uffb1\033\uffb1\046\uffb1\001\002" +
    "\000\006\003\260\021\257\001\002\000\026\003\uffb4\007" +
    "\uffb4\012\uffb4\014\uffb4\015\uffb4\017\uffb4\026\uffb4\027\uffb4" +
    "\033\uffb4\046\uffb4\001\002\000\006\003\253\024\255\001" +
    "\002\000\026\003\uffb7\007\uffb7\012\uffb7\014\uffb7\015\uffb7" +
    "\017\uffb7\026\uffb7\027\uffb7\033\uffb7\046\uffb7\001\002\000" +
    "\006\003\247\005\251\001\002\000\026\003\uffbb\007\uffbb" +
    "\012\uffbb\014\uffbb\015\uffbb\017\uffbb\026\uffbb\027\uffbb\033" +
    "\uffbb\046\uffbb\001\002\000\004\002\uffdf\001\002\000\006" +
    "\003\273\033\274\001\002\000\004\002\uffda\001\002\000" +
    "\004\002\uffdb\001\002\000\004\002\uffdc\001\002\000\006" +
    "\003\277\023\300\001\002\000\010\003\uffce\004\uffce\017" +
    "\uffce\001\002\000\010\003\303\004\306\017\304\001\002" +
    "\000\026\003\uffd0\007\uffd0\012\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\026\uffd0\027\uffd0\033\uffd0\046\uffd0\001\002\000\006" +
    "\003\310\024\312\001\002\000\016\003\uffc7\024\uffc7\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\001\002\000\016\003\uffcb" +
    "\024\uffcb\034\uffa1\035\uffa1\036\uffa1\037\uffa1\001\002\000" +
    "\026\003\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf\017\uffcf" +
    "\026\uffcf\027\uffcf\033\uffcf\046\uffcf\001\002\000\016\003" +
    "\uffc9\024\uffc9\034\uffa2\035\uffa2\036\uffa2\037\uffa2\001\002" +
    "\000\006\003\310\024\312\001\002\000\006\003\uffc4\021" +
    "\uffc4\001\002\000\026\003\uffc8\007\uffc8\012\uffc8\014\uffc8" +
    "\015\uffc8\017\uffc8\026\uffc8\027\uffc8\033\uffc8\046\uffc8\001" +
    "\002\000\006\003\314\021\313\001\002\000\026\003\uffc2" +
    "\007\uffc2\012\uffc2\014\uffc2\015\uffc2\017\uffc2\026\uffc2\027" +
    "\uffc2\033\uffc2\046\uffc2\001\002\000\004\021\uffc1\001\002" +
    "\000\026\003\uffc5\007\uffc5\012\uffc5\014\uffc5\015\uffc5\017" +
    "\uffc5\026\uffc5\027\uffc5\033\uffc5\046\uffc5\001\002\000\004" +
    "\021\317\001\002\000\026\003\uffc0\007\uffc0\012\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\026\uffc0\027\uffc0\033\uffc0\046\uffc0" +
    "\001\002\000\006\003\314\021\313\001\002\000\026\003" +
    "\uffc3\007\uffc3\012\uffc3\014\uffc3\015\uffc3\017\uffc3\026\uffc3" +
    "\027\uffc3\033\uffc3\046\uffc3\001\002\000\006\003\310\024" +
    "\312\001\002\000\026\003\uffca\007\uffca\012\uffca\014\uffca" +
    "\015\uffca\017\uffca\026\uffca\027\uffca\033\uffca\046\uffca\001" +
    "\002\000\006\003\310\024\312\001\002\000\026\003\uffc6" +
    "\007\uffc6\012\uffc6\014\uffc6\015\uffc6\017\uffc6\026\uffc6\027" +
    "\uffc6\033\uffc6\046\uffc6\001\002\000\026\003\uffcc\007\uffcc" +
    "\012\uffcc\014\uffcc\015\uffcc\017\uffcc\026\uffcc\027\uffcc\033" +
    "\uffcc\046\uffcc\001\002\000\010\003\303\004\306\017\304" +
    "\001\002\000\026\003\uffcd\007\uffcd\012\uffcd\014\uffcd\015" +
    "\uffcd\017\uffcd\026\uffcd\027\uffcd\033\uffcd\046\uffcd\001\002" +
    "\000\006\003\uff36\023\uff36\001\002\000\006\003\uff37\023" +
    "\uff37\001\002\000\004\023\077\001\002\000\026\003\uff9e" +
    "\007\uff9e\012\uff9e\014\uff9e\015\uff9e\017\uff9e\026\uff9e\027" +
    "\uff9e\033\uff9e\046\uff9e\001\002\000\006\003\336\025\340" +
    "\001\002\000\010\003\uff65\004\uff65\017\uff65\001\002\000" +
    "\026\003\uff67\007\uff67\012\uff67\014\uff67\015\uff67\017\uff67" +
    "\026\uff67\027\uff67\033\uff67\046\uff67\001\002\000\010\003" +
    "\343\004\345\017\344\001\002\000\026\003\uff66\007\uff66" +
    "\012\uff66\014\uff66\015\uff66\017\uff66\026\uff66\027\uff66\033" +
    "\uff66\046\uff66\001\002\000\006\003\351\021\350\001\002" +
    "\000\016\003\351\021\350\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\001\002\000\016\003\uff63\021\uff63\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\001\002\000\016\003\uff60\021\uff60\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\001\002\000\006\003\351" +
    "\021\350\001\002\000\026\003\uff5f\007\uff5f\012\uff5f\014" +
    "\uff5f\015\uff5f\017\uff5f\026\uff5f\027\uff5f\033\uff5f\046\uff5f" +
    "\001\002\000\026\003\uff5d\007\uff5d\012\uff5d\014\uff5d\015" +
    "\uff5d\017\uff5d\026\uff5d\027\uff5d\033\uff5d\046\uff5d\001\002" +
    "\000\004\021\uff5c\001\002\000\004\021\353\001\002\000" +
    "\026\003\uff5b\007\uff5b\012\uff5b\014\uff5b\015\uff5b\017\uff5b" +
    "\026\uff5b\027\uff5b\033\uff5b\046\uff5b\001\002\000\006\003" +
    "\351\021\350\001\002\000\026\003\uff62\007\uff62\012\uff62" +
    "\014\uff62\015\uff62\017\uff62\026\uff62\027\uff62\033\uff62\046" +
    "\uff62\001\002\000\026\003\uff5e\007\uff5e\012\uff5e\014\uff5e" +
    "\015\uff5e\017\uff5e\026\uff5e\027\uff5e\033\uff5e\046\uff5e\001" +
    "\002\000\026\003\uff61\007\uff61\012\uff61\014\uff61\015\uff61" +
    "\017\uff61\026\uff61\027\uff61\033\uff61\046\uff61\001\002\000" +
    "\010\003\343\004\345\017\344\001\002\000\026\003\uff64" +
    "\007\uff64\012\uff64\014\uff64\015\uff64\017\uff64\026\uff64\027" +
    "\uff64\033\uff64\046\uff64\001\002\000\010\003\uff47\007\uff47" +
    "\024\uff47\001\002\000\010\003\366\007\370\024\372\001" +
    "\002\000\026\003\uff49\007\uff49\012\uff49\014\uff49\015\uff49" +
    "\017\uff49\026\uff49\027\uff49\033\uff49\046\uff49\001\002\000" +
    "\004\017\u0112\001\002\000\004\024\uff43\001\002\000\004" +
    "\024\u010d\001\002\000\004\017\uff2f\001\002\000\026\003" +
    "\uff48\007\uff48\012\uff48\014\uff48\015\uff48\017\uff48\026\uff48" +
    "\027\uff48\033\uff48\046\uff48\001\002\000\006\003\373\032" +
    "\374\001\002\000\022\003\uff40\007\uff40\012\uff40\014\uff40" +
    "\017\uff40\026\uff40\027\uff40\046\uff40\001\002\000\022\003" +
    "\072\007\061\012\055\014\051\017\054\026\063\027\067" +
    "\046\u0100\001\002\000\026\003\uff45\007\uff45\012\uff45\014" +
    "\uff45\015\uff45\017\uff45\026\uff45\027\uff45\033\uff45\046\uff45" +
    "\001\002\000\026\003\uff3d\007\uff3d\012\uff3d\014\uff3d\015" +
    "\uff3d\017\uff3d\026\uff3d\027\uff3d\033\uff3d\046\uff3d\001\002" +
    "\000\026\003\uff41\007\uff41\012\uff41\014\uff41\015\uff41\017" +
    "\uff41\026\uff41\027\uff41\033\uff41\046\uff41\001\002\000\010" +
    "\003\u0103\004\u0105\017\u0106\001\002\000\004\046\u0100\001" +
    "\002\000\026\003\uff3e\007\uff3e\012\uff3e\014\uff3e\015\uff3e" +
    "\017\uff3e\026\uff3e\027\uff3e\033\uff3e\046\uff3e\001\002\000" +
    "\004\033\u010a\001\002\000\026\003\uff3c\007\uff3c\012\uff3c" +
    "\014\uff3c\015\uff3c\017\uff3c\026\uff3c\027\uff3c\033\uff3c\046" +
    "\uff3c\001\002\000\004\033\u0109\001\002\000\004\033\uff3a" +
    "\001\002\000\004\033\u0108\001\002\000\026\003\uff39\007" +
    "\uff39\012\uff39\014\uff39\015\uff39\017\uff39\026\uff39\027\uff39" +
    "\033\uff39\046\uff39\001\002\000\026\003\uff3b\007\uff3b\012" +
    "\uff3b\014\uff3b\015\uff3b\017\uff3b\026\uff3b\027\uff3b\033\uff3b" +
    "\046\uff3b\001\002\000\026\003\uff38\007\uff38\012\uff38\014" +
    "\uff38\015\uff38\017\uff38\026\uff38\027\uff38\033\uff38\046\uff38" +
    "\001\002\000\022\003\072\007\061\012\055\014\051\017" +
    "\054\026\063\027\067\046\u0100\001\002\000\026\003\uff3f" +
    "\007\uff3f\012\uff3f\014\uff3f\015\uff3f\017\uff3f\026\uff3f\027" +
    "\uff3f\033\uff3f\046\uff3f\001\002\000\006\003\373\032\374" +
    "\001\002\000\026\003\uff44\007\uff44\012\uff44\014\uff44\015" +
    "\uff44\017\uff44\026\uff44\027\uff44\033\uff44\046\uff44\001\002" +
    "\000\004\024\u0110\001\002\000\006\003\373\032\374\001" +
    "\002\000\026\003\uff42\007\uff42\012\uff42\014\uff42\015\uff42" +
    "\017\uff42\026\uff42\027\uff42\033\uff42\046\uff42\001\002\000" +
    "\006\022\uff31\024\uff32\001\002\000\004\022\u0114\001\002" +
    "\000\004\007\370\001\002\000\004\024\uff30\001\002\000" +
    "\010\003\366\007\370\024\372\001\002\000\026\003\uff46" +
    "\007\uff46\012\uff46\014\uff46\015\uff46\017\uff46\026\uff46\027" +
    "\uff46\033\uff46\046\uff46\001\002\000\012\003\uff58\004\uff58" +
    "\017\uff58\023\uff58\001\002\000\012\003\106\004\112\017" +
    "\110\023\104\001\002\000\026\003\uff5a\007\uff5a\012\uff5a" +
    "\014\uff5a\015\uff5a\017\uff5a\026\uff5a\027\uff5a\033\uff5a\046" +
    "\uff5a\001\002\000\026\003\uff59\007\uff59\012\uff59\014\uff59" +
    "\015\uff59\017\uff59\026\uff59\027\uff59\033\uff59\046\uff59\001" +
    "\002\000\006\003\u011e\024\u011f\001\002\000\026\003\uff56" +
    "\007\uff56\012\uff56\014\uff56\015\uff56\017\uff56\026\uff56\027" +
    "\uff56\033\uff56\046\uff56\001\002\000\006\003\uff54\032\uff54" +
    "\001\002\000\006\003\u0120\032\u0121\001\002\000\022\003" +
    "\uff51\007\uff51\012\uff51\014\uff51\015\uff51\017\uff51\026\uff51" +
    "\027\uff51\001\002\000\022\003\072\007\061\012\055\014" +
    "\051\015\u0124\017\054\026\063\027\067\001\002\000\026" +
    "\003\uff55\007\uff55\012\uff55\014\uff55\015\uff55\017\uff55\026" +
    "\uff55\027\uff55\033\uff55\046\uff55\001\002\000\004\033\u012c" +
    "\001\002\000\004\021\u0129\001\002\000\006\015\u0127\033" +
    "\uff4e\001\002\000\026\003\uff52\007\uff52\012\uff52\014\uff52" +
    "\015\uff52\017\uff52\026\uff52\027\uff52\033\uff52\046\uff52\001" +
    "\002\000\004\021\u0128\001\002\000\004\033\uff4d\001\002" +
    "\000\022\003\072\007\061\012\055\014\051\017\054\026" +
    "\063\027\067\033\uff4c\001\002\000\004\033\uff4b\001\002" +
    "\000\026\003\uff4f\007\uff4f\012\uff4f\014\uff4f\015\uff4f\017" +
    "\uff4f\026\uff4f\027\uff4f\033\uff4f\046\uff4f\001\002\000\026" +
    "\003\uff4a\007\uff4a\012\uff4a\014\uff4a\015\uff4a\017\uff4a\026" +
    "\uff4a\027\uff4a\033\uff4a\046\uff4a\001\002\000\022\003\072" +
    "\007\061\012\055\014\051\015\u0124\017\054\026\063\027" +
    "\067\001\002\000\026\003\uff50\007\uff50\012\uff50\014\uff50" +
    "\015\uff50\017\uff50\026\uff50\027\uff50\033\uff50\046\uff50\001" +
    "\002\000\006\003\u0120\032\u0121\001\002\000\026\003\uff53" +
    "\007\uff53\012\uff53\014\uff53\015\uff53\017\uff53\026\uff53\027" +
    "\uff53\033\uff53\046\uff53\001\002\000\012\003\106\004\112" +
    "\017\110\023\104\001\002\000\026\003\uff57\007\uff57\012" +
    "\uff57\014\uff57\015\uff57\017\uff57\026\uff57\027\uff57\033\uff57" +
    "\046\uff57\001\002\000\022\003\065\007\061\012\055\014" +
    "\051\017\054\026\063\027\067\033\053\001\002\000\004" +
    "\002\uffe0\001\002\000\006\003\044\032\046\001\002\000" +
    "\004\002\uffe3\001\002\000\006\003\041\024\043\001\002" +
    "\000\004\002\uffe6\001\002\000\006\003\037\023\040\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\000\001\002" +
    "\000\006\003\ufffb\030\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\012\002\003\005\005\015\011\021\004\001" +
    "\001\000\002\001\001\000\006\005\u013b\021\004\001\001" +
    "\000\004\015\u013a\001\001\000\004\146\u0138\001\001\000" +
    "\004\003\035\001\001\000\004\147\012\001\001\000\002" +
    "\001\001\000\004\022\013\001\001\000\002\001\001\000" +
    "\004\151\033\001\001\000\004\150\016\001\001\000\006" +
    "\017\021\023\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\152\031\001\001\000\004" +
    "\020\024\001\001\000\002\001\001\000\004\153\026\001" +
    "\001\000\004\030\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\032\001\001\000\002\001\001\000" +
    "\006\017\021\023\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\154\u0136\001\001\000\004\011\041\001" +
    "\001\000\004\155\u0134\001\001\000\002\001\001\000\004" +
    "\013\044\001\001\000\004\156\u0132\001\001\000\002\001" +
    "\001\000\026\014\055\031\065\032\056\033\063\034\047" +
    "\035\061\036\046\037\067\124\051\125\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\u0119\001\001" +
    "\000\004\126\363\001\001\000\002\001\001\000\004\213" +
    "\334\001\001\000\004\201\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\135\330\001" +
    "\001\000\002\001\001\000\004\160\275\001\001\000\002" +
    "\001\001\000\010\157\271\202\072\227\073\001\001\000" +
    "\002\001\001\000\004\167\242\001\001\000\024\031\070" +
    "\032\056\033\063\034\047\035\061\036\046\037\067\124" +
    "\051\125\057\001\001\000\002\001\001\000\006\202\072" +
    "\227\073\001\001\000\004\057\077\001\001\000\004\135" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\060\110\065\101\101\102\102\104\104\100\111\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\206" +
    "\001\001\000\002\001\001\000\026\050\133\051\136\052" +
    "\131\053\132\054\127\055\130\075\173\102\104\104\100" +
    "\111\172\001\001\000\006\074\116\107\167\001\001\000" +
    "\004\211\165\001\001\000\002\001\001\000\004\210\163" +
    "\001\001\000\002\001\001\000\004\207\112\001\001\000" +
    "\006\074\116\107\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\126\110\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\050\133\051\136\052\131\053" +
    "\132\054\127\055\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\212\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\175\161\001\001\000\004\177\157\001\001" +
    "\000\004\200\155\001\001\000\004\176\151\001\001\000" +
    "\020\050\154\051\136\052\131\053\132\054\127\055\152" +
    "\056\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\050\154\051\136\052\131\053\132" +
    "\054\127\055\152\056\156\001\001\000\002\001\001\000" +
    "\020\050\154\051\136\052\131\053\132\054\127\055\152" +
    "\056\160\001\001\000\002\001\001\000\020\050\154\051" +
    "\136\052\131\053\132\054\127\055\152\056\162\001\001" +
    "\000\002\001\001\000\006\074\116\107\164\001\001\000" +
    "\002\001\001\000\006\074\116\107\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\211\165\001\001\000" +
    "\004\210\163\001\001\000\004\112\175\001\001\000\002" +
    "\001\001\000\004\207\112\001\001\000\002\001\001\000" +
    "\006\076\177\100\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\101\205\113\204\001\001\000\002\001" +
    "\001\000\012\075\173\102\104\104\100\111\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\210\001\001\000\002\001\001\000\004\203\240" +
    "\001\001\000\026\031\213\032\056\033\063\034\047\035" +
    "\061\036\046\037\067\063\214\124\051\125\057\001\001" +
    "\000\004\106\237\001\001\000\002\001\001\000\010\202" +
    "\072\204\216\227\073\001\001\000\004\106\217\001\001" +
    "\000\002\001\001\000\004\064\221\001\001\000\002\001" +
    "\001\000\004\066\225\001\001\000\004\205\235\001\001" +
    "\000\026\031\227\032\056\033\063\034\047\035\061\036" +
    "\046\037\067\067\226\124\051\125\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\234\001\001\000" +
    "\010\202\072\206\231\227\073\001\001\000\004\070\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\227\032\056\033\063\034\047\035\061" +
    "\036\046\037\067\067\236\124\051\125\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\031\213\032\056" +
    "\033\063\034\047\035\061\036\046\037\067\063\241\124" +
    "\051\125\057\001\001\000\002\001\001\000\004\040\244" +
    "\001\001\000\004\170\266\001\001\000\002\001\001\000" +
    "\004\041\247\001\001\000\004\172\264\001\001\000\002" +
    "\001\001\000\004\171\251\001\001\000\004\042\253\001" +
    "\001\000\004\173\262\001\001\000\002\001\001\000\004" +
    "\043\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\174\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\263\001\001\000\002\001\001\000\004\042" +
    "\265\001\001\000\002\001\001\000\004\041\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\300\001\001\000\004\161\326\001\001\000" +
    "\020\045\304\050\301\051\136\052\131\053\132\054\127" +
    "\055\130\001\001\000\002\001\001\000\004\046\325\001" +
    "\001\000\004\164\323\001\001\000\004\162\321\001\001" +
    "\000\002\001\001\000\004\163\306\001\001\000\004\046" +
    "\310\001\001\000\004\165\317\001\001\000\002\001\001" +
    "\000\004\047\314\001\001\000\002\001\001\000\004\166" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\320\001\001\000\002\001\001\000" +
    "\004\046\322\001\001\000\002\001\001\000\004\046\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\045" +
    "\327\050\301\051\136\052\131\053\132\054\127\055\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\333\001\001\000\002\001\001\000\004" +
    "\071\336\001\001\000\004\214\357\001\001\000\002\001" +
    "\001\000\020\050\341\051\136\052\131\053\132\054\127" +
    "\055\130\072\340\001\001\000\002\001\001\000\004\073" +
    "\356\001\001\000\004\073\355\001\001\000\004\215\353" +
    "\001\001\000\004\216\345\001\001\000\004\073\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\217\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\050\341\051\136\052\131\053\132\054" +
    "\127\055\130\072\360\001\001\000\002\001\001\000\004" +
    "\223\u0115\001\001\000\010\127\370\133\366\134\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\224\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\130\374\001\001\000\004\225\u010a\001\001" +
    "\000\030\031\u0100\032\056\033\063\034\047\035\061\036" +
    "\046\037\067\124\051\125\057\131\376\132\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\136\u0103\001\001\000\004\132\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\226\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\031" +
    "\u0100\032\056\033\063\034\047\035\061\036\046\037\067" +
    "\124\051\125\057\131\u010b\132\375\001\001\000\002\001" +
    "\001\000\004\130\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\130\u0110\001\001\000\002\001\001\000" +
    "\004\230\u0112\001\001\000\002\001\001\000\006\133\u0114" +
    "\134\364\001\001\000\002\001\001\000\010\127\u0116\133" +
    "\366\134\364\001\001\000\002\001\001\000\004\220\u0130" +
    "\001\001\000\016\065\u011b\101\102\102\104\104\100\111" +
    "\106\116\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\u011c\001\001\000\002\001\001\000\004\221" +
    "\u012e\001\001\000\004\120\u0121\001\001\000\004\222\u012c" +
    "\001\001\000\030\031\u0124\032\056\033\063\034\047\035" +
    "\061\036\046\037\067\121\u0125\123\u0122\124\051\125\057" +
    "\001\001\000\002\001\001\000\004\122\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\031\u0129\032\056\033" +
    "\063\034\047\035\061\036\046\037\067\124\051\125\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\031\u0124\032\056\033\063\034\047\035\061" +
    "\036\046\037\067\121\u012d\123\u0122\124\051\125\057\001" +
    "\001\000\002\001\001\000\004\120\u012f\001\001\000\002" +
    "\001\001\000\016\065\u011b\101\102\102\104\104\100\111" +
    "\106\116\u0131\001\001\000\002\001\001\000\026\014\u0133" +
    "\031\065\032\056\033\063\034\047\035\061\036\046\037" +
    "\067\124\051\125\057\001\001\000\002\001\001\000\004" +
    "\013\u0135\001\001\000\002\001\001\000\004\011\u0137\001" +
    "\001\000\002\001\001\000\004\003\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public  ArrayList<String> expectedTokens_msg = new ArrayList<String>();
    public  ArrayList<String> errorsLines = new ArrayList<String>();
    public  ArrayList<String> errors = new ArrayList<String>();
    public  ArrayList<String> getExpectedTokens() {
        return expectedTokens_msg;
    }

    public ArrayList<String> getLineErrors() {
        return errorsLines;
    }
    public ArrayList<String> getErrors() {
        return errors;
    }

    protected void report_expected_token_ids() {

        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected : ids) {
            if (!(symbl_name_from_id(expected).equals("EOF") || symbl_name_from_id(expected).equals("error")))
                list.add(symbl_name_from_id(expected));
          }
        String msg = "expected tokens are "+ list;
        expectedTokens_msg.add(msg);
        System.err.println(msg);  
    }
    
    public void syntax_error(Symbol s){
        String msg = "Syntax error: "+" Line: " + s.left +" Column: " +s.right;
        String symbolName = symbl_name_from_id(s.sym);
        msg += "\nCurrent: " + symbolName + "\n";

        errorsLines.add(msg);
        System.err.print(msg);
      
        report_expected_token_ids();
    }
    
    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{   
        
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    public void printError(String pMsg){
        System.err.println(pMsg+"\n");
        errors.add(pMsg+"\n");        
    }

    public void report_fatal_error(String message, Object info) {

        //report_error(message, info);
        //System.exit(1);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= variables_list lmain 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= lmain 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lmain ::= MAIN main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
 printError("Missing main token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lmain ::= error NT$0 main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lmain",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables_list ::= variables_elem variables_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables_list ::= variables_elem 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                                    Symbol symbolT= new Symbol(0,tleft,tright,t);
                                    SR_Type type= new SR_Type (symbolT);
                                    type.setType(sym.TYPE_NUM);
                                    SemanticStack.getInstance().push(type);
                              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables_elem ::= TYPE_NUM NT$1 variables_elem_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.IDENTIFIER,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_elem_one ::= IDENTIFIER NT$2 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
 printError("Missing Type token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables_elem_one ::= error NT$3 variables_elem_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_one",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables_elem_two ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalUn();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables_elem_two ::= assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_elem_two ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables_elem_two",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // end_decl ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // end_decl ::= error 
            {
              Object RESULT =null;
		 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end_decl",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assign ::= ASSIGN assign_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
 printError("Missing = token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign ::= error NT$4 assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign_one ::= LITERAL_NUM NT$5 assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_one",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign_two ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalIn();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assign_two",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // main ::= LPAR mainn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // main ::= error NT$6 mainn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mainn ::= RPAR mainnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainn ::= error NT$7 mainnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainnn ::= BEGIN mainnnn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mainnn ::= error NT$8 mainnnn 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnn",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainnnn ::= content END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainnnn ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mainnnn ::= error NT$9 fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mainnnn",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fin ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fin ::= error 
            {
              Object RESULT =null;
		 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // content ::= structures content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // content ::= structures 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("content",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structures ::= if_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structures ::= putw_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // structures ::= puts_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // structures ::= while_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // structures ::= declar_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // structures ::= funct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("structures",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$10 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                           Symbol symbol= new Symbol(sym.PUTS,pleft,pright,p);
                           SR_PUTW register= new SR_PUTW(symbol);
                           SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // putw_struct ::= PUTW NT$10 putw_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // putw_struct_one ::= LPAR putw_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // putw_struct_one ::= error NT$11 putw_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_one",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // putw_struct_two ::= arithmetic putw_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // putw_struct_two ::= IDENTIFIER NT$12 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$13 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // putw_struct_two ::= LITERAL_NUM NT$13 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",114, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // putw_struct_two ::= error NT$14 putw_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_two",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // putw_struct_three ::= RPAR putw_struct_fourth 
            {
              Object RESULT =null;
		 RWEvaluator.getInstance().evalPutw(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // putw_struct_three ::= error NT$15 putw_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_three",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // putw_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$16 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",116, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // putw_struct_fourth ::= error NT$16 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("putw_struct_fourth",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$17 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                           Symbol symbol= new Symbol(sym.PUTS,pleft,pright,p);
                           SR_PUTS register= new SR_PUTS(symbol);
                           SemanticStack.getInstance().push(register);
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",117, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // puts_struct ::= PUTS NT$17 puts_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // puts_struct_one ::= LPAR puts_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$18 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",118, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // puts_struct_one ::= error NT$18 puts_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_one",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                                            Symbol symbol= new Symbol(0,sleft,sright,s);
                                            SR_DO sr_do = new SR_DO(symbol,"char");
                                            SemanticStack.getInstance().push(sr_do);
                                            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",119, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // puts_struct_two ::= LITERAL_CONSTANT NT$19 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$20 ::= 
            {
              Object RESULT =null;
 printError("Missing } token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",120, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // puts_struct_two ::= error NT$20 puts_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_two",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // puts_struct_three ::= RPAR puts_struct_fourth 
            {
              Object RESULT =null;
		 RWEvaluator.getInstance().evalPuts(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$21 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$21",121, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // puts_struct_three ::= error NT$21 puts_struct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_three",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // puts_struct_fourth ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$22 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$22",122, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // puts_struct_fourth ::= error NT$22 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("puts_struct_fourth",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arithmetic ::= add 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arithmetic ::= subs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arithmetic ::= mult 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arithmetic ::= div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$23 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$23",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // mult ::= params MULT NT$23 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("mult",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$24 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$24",124, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // div ::= params DIV NT$24 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("div",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$25 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$25",125, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // add ::= params PLUS NT$25 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("add",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$26 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
Symbol symbol= new Symbol(0,arleft,arright,ar);
                      SR_Op register= new SR_Op (symbol);
                      SemanticStack.getInstance().push(register);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$26",126, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // subs ::= params MINUS NT$26 _aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("subs",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // _aux ::= arithmetic 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // _aux ::= params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("_aux",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // params ::= LITERAL_NUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // params ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // params ::= error 
            {
              Object RESULT =null;
		 printError("Missing parameter token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$27 ::= 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbol = new Symbol(0,iffleft,iffright,iff);
                 SR_If register = new SR_If(symbol);
                 SemanticStack.getInstance().push(register);
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$27",127, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_struct ::= IF NT$27 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$28 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$28",128, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_struct ::= error NT$28 if_struct_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_struct_one ::= LPAR if_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_one",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_struct_two ::= condition if_struct_three 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_two",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_struct_three ::= RPAR if_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_three",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_struct_four ::= BEGIN if_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$29 ::= 
            {
              Object RESULT =null;
 printError("Missing { token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$29",129, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_struct_four ::= error NT$29 if_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_four",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_struct_five ::= content if_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$30 ::= 
            {
              Object RESULT =null;
 printError("Missing ( token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$30",130, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_struct_five ::= error NT$30 if_struct_six 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_five",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_struct_six ::= END else_struct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if_struct_six",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // else_struct ::= ELSE else_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // else_struct_one ::= BEGIN else_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$31 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$31",131, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // else_struct_one ::= error NT$31 else_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_one",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_struct_two ::= content else_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$32 ::= 
            {
              Object RESULT =null;
 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$32",132, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // else_struct_two ::= error NT$32 else_struct_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_two",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // else_struct_three ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_struct_three",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condition ::= condition_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condition ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condition_aux ::= condition_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condition_aux ::= error 
            {
              Object RESULT =null;
		 printError("Missing if token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_aux",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$33 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$33",133, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // condition_one ::= LITERAL_NUM NT$33 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$34 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$34",134, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condition_one ::= IDENTIFIER NT$34 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condition_one ::= arithmetic_aux condition_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$35 ::= 
            {
              Object RESULT =null;
 printError("Missing literal_num or Idendifier or arithmetic expression token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$35",135, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condition_one ::= error NT$35 condition_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_one",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condition_two ::= comparison condition_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_two",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // condition_three ::= LITERAL_NUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condition_three ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // condition_three ::= arithmetic_aux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // condition_three ::= error 
            {
              Object RESULT =null;
		 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condition_three",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithmetic_aux ::= LPAR arithmetic arithmetic_aux_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithmetic_aux_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$36 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$36",136, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arithmetic_aux_one ::= error NT$36 RPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_aux_one",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // exp ::= LPAR expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exp",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= condition_aux expr_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_one ::= RPAR expr_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_one ::= RPAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_one",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_two ::= logic_comparison expr_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_two",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_three ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_three",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // comparison ::= LOWER 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // comparison ::= HIGHER 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // comparison ::= EQUALS 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // comparison ::= DIFFERENT 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparison",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logic_comparison ::= AND 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logic_comparison ::= OR 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol= new Symbol(0,arleft,arright,ar);
                    SR_Op register= new SR_Op(symbol);
                    SemanticStack.getInstance().push(register);
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("logic_comparison",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$37 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.IDENTIFIER,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$37",137, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declar_assign ::= IDENTIFIER NT$37 declar_assign_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declar_assign_one ::= ASSIGN declar_assign_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$38 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$38",138, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declar_assign_one ::= error NT$38 declar_assign_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_one",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$39 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(0,idleft,idright,id);
                                      SR_ID register= new SR_ID(symbolID);
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$39",139, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declar_assign_two ::= IDENTIFIER NT$39 declar_assign_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declar_assign_two ::= arithmetic declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$40 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 Symbol symbolID= new Symbol(sym.LITERAL_NUM,idleft,idright,id);
                                      SR_DO register= new SR_DO(symbolID,"int");
                                      SemanticStack.getInstance().push(register);
                                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$40",140, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declar_assign_two ::= LITERAL_NUM NT$40 declar_assign_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declar_assign_two ::= error declar_assign_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_two",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declar_assign_three ::= SEMICOLON 
            {
              Object RESULT =null;
		VariableEvaluator.getInstance().evalAssign();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$41 ::= 
            {
              Object RESULT =null;
 printError("Missing ; token") ;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$41",141, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // declar_assign_three ::= error NT$41 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declar_assign_three",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // while_struct ::= WHILE while_struct_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // while_struct_one ::= LPAR while_struct_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$42 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$42",142, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // while_struct_one ::= error NT$42 while_struct_two 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_one",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // while_struct_two ::= condition while_struct_three 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_two",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // while_struct_three ::= RPAR while_struct_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$43 ::= 
            {
              Object RESULT =null;
 printError("Missing ) token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$43",143, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // while_struct_three ::= error NT$43 while_struct_four 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_three",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // while_struct_four ::= BEGIN while_struct_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$44 ::= 
            {
              Object RESULT =null;
 printError("Missing { token"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$44",144, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // while_struct_four ::= error NT$44 while_struct_five 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_four",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // while_struct_five ::= while_struct_aux while_struct_six 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_five",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // while_struct_aux ::= content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // while_struct_aux ::= content BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // while_struct_aux ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // while_struct_aux ::= BREAK SEMICOLON content 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_aux",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // while_struct_six ::= END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while_struct_six",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // funct ::= init_decl funct_sec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // funct_sec ::= LPAR funct_third 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_sec",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$45 ::= 
            {
              Object RESULT =null;
printError("Missing ( token");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$45",145, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // funct_sec ::= error NT$45 funct_third 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_sec",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // funct_third ::= RPAR funct_fourth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_third",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // funct_third ::= parameters RPAR funct_fourth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_third",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$46 ::= 
            {
              Object RESULT =null;
printError("Missing ) token");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$46",146, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // funct_third ::= error NT$46 RPAR funct_fourth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_third",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // funct_fourth ::= BEGIN funct_fifth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fourth",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$47 ::= 
            {
              Object RESULT =null;
printError("Missing { token");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$47",147, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // funct_fourth ::= error NT$47 funct_fifth 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fourth",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // funct_fifth ::= content funct_sixth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fifth",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // funct_fifth ::= funct_sixth 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_fifth",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // funct_sixth ::= RETURN funct_seventh 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_sixth",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // funct_seventh ::= LITERAL_NUM END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_seventh",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$48 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                    VariableEvaluator.getInstance().Exist();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$48",148, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // funct_seventh ::= IDENTIFIER NT$48 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_seventh",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // funct_seventh ::= error END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funct_seventh",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // init_decl ::= TYPE_NUM error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // init_decl ::= TYPE_NUM init_decl_one 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 
        Symbol symbolID = new Symbol(0,valleft,valright,val);
        SR_Type type = new SR_Type(symbolID);
        type.setType(sym.TYPE_NUM);
        SemanticStack.getInstance().push(type); 
        
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$49 ::= 
            {
              Object RESULT =null;
 printError("Type not specified"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$49",149, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // init_decl ::= error NT$49 init_decl_one 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // init_decl_one ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("init_decl_one",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // parameters ::= primitiveType IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
               SR_ID srId = new SR_ID(symbol);
               SemanticStack.getInstance().push(srId);

               VariableEvaluator.getInstance().evalUn();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$50 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                    VariableEvaluator.getInstance().evalUn();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$50",150, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // parameters ::= primitiveType IDENTIFIER NT$50 COMMA parameters 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameters",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // primitiveType ::= TYPE_NUM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        Symbol symbolID= new Symbol(0,valleft,valright,val);
                        SR_Type type= new SR_Type(symbolID);
                        type.setType(sym.TYPE_NUM);
                        SemanticStack.getInstance().push(type);

                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("primitiveType",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // switch ::= SWITCH switch_one 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // switch_one ::= LPAR switch_two 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_one",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$51 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

                    Symbol symbol = new Symbol(sym.IDENTIFIER,idleft,idright,id);
                    SR_ID srId = new SR_ID(symbol);
                    SemanticStack.getInstance().push(srId);
                    VariableEvaluator.getInstance().Exist();
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$51",151, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // switch_two ::= IDENTIFIER NT$51 RPAR switch_three 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_two",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // switch_three ::= BEGIN case_stms switch_four 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_three",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // switch_four ::= DEFAULT switch_five 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_four",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // switch_five ::= BREAK END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_five",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // case_stms ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_stms",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
