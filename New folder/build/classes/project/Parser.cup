
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package project;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import project.semantic.evaluators.*;
import project.semantic.SemanticStack;
import project.semantic.SymbolTable.SymbolTable;
import project.semantic.registers.*;
import project.semantic.Writer;

parser code {:

    public  ArrayList<String> expectedTokens_msg = new ArrayList<String>();
    public  ArrayList<String> errorsLines = new ArrayList<String>();
    public  ArrayList<String> errors = new ArrayList<String>();
    public  ArrayList<String> getExpectedTokens() {
        return expectedTokens_msg;
    }

    public ArrayList<String> getLineErrors() {
        return errorsLines;
    }
    public ArrayList<String> getErrors() {
        return errors;
    }

    protected void report_expected_token_ids() {

        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();

        for (Integer expected : ids) {
            if (!(symbl_name_from_id(expected).equals("EOF") || symbl_name_from_id(expected).equals("error")))
                list.add(symbl_name_from_id(expected));
          }
        String msg = "expected tokens are "+ list;
        expectedTokens_msg.add(msg);
        System.err.println(msg);  
    }
    
    public void syntax_error(Symbol s){
        String msg = "Syntax error: "+" Line: " + s.left +" Column: " +s.right;
        String symbolName = symbl_name_from_id(s.sym);
        msg += "\nCurrent: " + symbolName + "\n";

        errorsLines.add(msg);
        System.err.print(msg);
      
        report_expected_token_ids();
    }
    
    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{   
        
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    public void printError(String pMsg){
        System.err.println(pMsg+"\n");
        errors.add(pMsg+"\n");        
    }

    public void report_fatal_error(String message, Object info) {

        //report_error(message, info);
        //System.exit(1);
    }


:}   

// Simbolos terminales
terminal LITERAL_NUM,LITERAL_CONSTANT, LITERAL_CHAR, TYPE_NUM, TYPE_CHAR, TYPE_STR, IF, ELSE, WHILE,BREAK, KEYWORD, 
    IDENTIFIER, ARITHMETIC, SEMICOLON, COMMA, LPAR, RPAR, ASSIGN,PUTW, PUTS, MAIN, OPERADOR, BEGIN, END, PLUS,MINUS,MULT,DIV,
    AND, OR, HIGHER, LOWER,EQUALS,DIFFERENT;  


// Simbolos no terminales
non terminal program,main,decl_set, variables_list, variables_decl_aux , aux_variable_list, constant_list, mainn, fin, mainnn,mainnnn
             ,lmain, variables_list_one, assign,assign_one,variables_elem,variables_elem_one,variables_elem_two, variables_elem_three
            ,end_decl,decl_set_aux, variables_list_auxx,assign_two,content,if_struct,while_struct,declar_assign,putw_struct,puts_struct,structures,
            puts_struct_one,puts_struct_two,puts_struct_three,puts_struct_fourth            
            ,putw_struct_one,putw_struct_two,putw_struct_three,putw_struct_fourth,
            arithmetic,add ,subs, mult, div, params,_aux,if_struct_one,if_struct_two,if_struct_three,if_struct_four,if_struct_five,else_struct,
            condition,else_struct_one,else_struct_two,else_struct_three,declar_assign_one,declar_assign_two,declar_assign_three,
            comparison,expr,expr_two,expr_aux,logic_comparison,exp,arithmetic_aux,expr_aux_one,condition_one,arithmetic_aux_one,
            if_struct_six,condition_two,condition_three,condition_aux,expr_one, expr_three, expr_four, while_struct_one,while_struct_two,
            while_struct_three,while_struct_four,while_struct_five,while_struct_six,while_struct_aux
            ;

// Seccion de precedencia


//Gramatica

start with program;
// Simbolo Inicial
    
program ::= variables_list:d lmain:f | lmain:f;

lmain ::= MAIN main | error {: printError("Missing main token") ;:} main;



variables_list ::= variables_elem variables_list | variables_elem ;

variables_elem ::= TYPE_NUM variables_elem_one ;
                   //| error {: printError("Missing Type token") ;:} variables_elem_one  ;

variables_elem_one ::= IDENTIFIER variables_elem_two
                       | error {: printError("Missing Type token") ;:} variables_elem_two  ;

variables_elem_two ::= SEMICOLON 
                        | assign
                        | error {: printError("Missing ; token") ;:} ;
end_decl ::= SEMICOLON 
                        | error {: printError("Missing ; token") ;:} ;

assign ::= ASSIGN assign_one | error {: printError("Missing = token") ;:} assign_one;

assign_one ::= LITERAL_NUM assign_two ;

assign_two ::= SEMICOLON;

main ::= LPAR  mainn
        |error {: printError("Missing ( token") ;:} mainn;

mainn ::= RPAR mainnn
        | error {: printError("Missing ) token") ;:} mainnn; 

mainnn ::= BEGIN mainnnn
        | error {: printError("Missing { token") ;:} mainnnn; 

mainnnn ::=  content END | END 
        | error {: printError("Missing } token") ;:} fin; 

fin ::=  END
        | error {: printError("Missing } token") ;:};

content ::= structures content | structures ;

structures ::= if_struct | putw_struct | puts_struct| while_struct | declar_assign ;

putw_struct ::= PUTW putw_struct_one;
putw_struct_one ::= LPAR putw_struct_two| error {: printError("Missing } token") ;:} putw_struct_two;
putw_struct_two ::= arithmetic putw_struct_three | IDENTIFIER putw_struct_three | LITERAL_NUM putw_struct_three | error {: printError("Missing } token") ;:} putw_struct_three;
putw_struct_three ::= RPAR putw_struct_fourth| error {: printError("Missing } token") ;:} putw_struct_fourth; 
putw_struct_fourth ::= SEMICOLON;

puts_struct ::= PUTS puts_struct_one;
puts_struct_one ::= LPAR puts_struct_two | error {: printError("Missing } token") ;:} puts_struct_two;
puts_struct_two ::= LITERAL_CONSTANT puts_struct_three | error {: printError("Missing } token") ;:} puts_struct_three;
puts_struct_three ::= RPAR puts_struct_fourth;
puts_struct_fourth ::= SEMICOLON;



arithmetic ::= add |subs|mult |div;
mult ::= params MULT _aux;
div ::= params DIV _aux;
add ::= params PLUS _aux;
subs ::= params MINUS _aux;


_aux ::= arithmetic | params ;


params ::= LITERAL_NUM | IDENTIFIER| error {: printError("Missing parameter token") ;:};

/*
if_struct ::= IF if_struct_one | error {: printError("Missing if token") ;:} if_struct_one;
if_struct_one ::= LPAR condition if_struct_two ;
if_struct_two ::= RPAR if_struct_three| error {: printError("Missing ( token") ;:} if_struct_three;
if_struct_three ::= BEGIN if_struct_four | error {: printError("Missing { token") ;:} condition if_struct_four;
if_struct_four ::= content if_struct_five | error {: printError("Missing ( token") ;:} condition if_struct_five;
if_struct_five ::= END | END else_struct;
*/

if_struct ::= IF if_struct_one | error {: printError("Missing if token") ;:} if_struct_one;
if_struct_one ::= LPAR if_struct_two ;
if_struct_two ::= condition if_struct_three ; //| error {: printError("Missing ( token") ;:} if_struct_three;
if_struct_three ::= RPAR if_struct_four;
if_struct_four ::= BEGIN if_struct_five | error {: printError("Missing { token") ;:} if_struct_five; 
if_struct_five ::= content if_struct_six | error {: printError("Missing ( token") ;:} if_struct_six;
if_struct_six ::= END | END else_struct;




else_struct ::= ELSE else_struct_one ;//| error {: printError("Missing if token") ;:} else_struct_one;
else_struct_one ::= BEGIN else_struct_two | error {: printError("Missing if token") ;:} else_struct_two;
else_struct_two ::= content else_struct_three | error {: printError("Missing if token") ;:} else_struct_three;
else_struct_three ::= END;

condition ::= condition_aux | exp ;
condition_aux ::= condition_one | error {: printError("Missing if token") ;:};
condition_one ::= LITERAL_NUM condition_two  | IDENTIFIER condition_two  | arithmetic_aux condition_two;
condition_two ::= comparison condition_three;
condition_three ::= LITERAL_NUM | IDENTIFIER | arithmetic_aux;
arithmetic_aux ::= LPAR  arithmetic arithmetic_aux_one;
arithmetic_aux_one ::=  RPAR;
exp ::= LPAR expr ;
expr ::= condition_aux expr_one ;
expr_one ::= RPAR expr_two | RPAR;
expr_two ::= logic_comparison expr_three;
expr_three ::= exp  ;
comparison ::= LOWER | HIGHER | EQUALS | DIFFERENT;
logic_comparison ::= AND | OR;


declar_assign ::= IDENTIFIER declar_assign_one;
declar_assign_one ::= ASSIGN declar_assign_two | error {: printError("Missing ) token"); :} declar_assign_two;
declar_assign_two ::= IDENTIFIER declar_assign_three | arithmetic declar_assign_three | LITERAL_NUM declar_assign_three | error declar_assign_three;
declar_assign_three ::= SEMICOLON;

while_struct ::= WHILE while_struct_one ;
while_struct_one ::= LPAR while_struct_two;
while_struct_two ::= condition while_struct_three;
while_struct_three ::= RPAR while_struct_four;
while_struct_four ::= BEGIN while_struct_five;
while_struct_five ::= while_struct_aux while_struct_six;
while_struct_aux ::= content | content BREAK SEMICOLON | BREAK SEMICOLON | BREAK SEMICOLON content;
while_struct_six ::= END;
